/* automatically generated by rust-bindgen 0.69.5 */

pub const _BSD_SOURCE: u32 = 1;
pub const _XOPEN_SOURCE: u32 = 700;
pub const __BYTE_ORDER: u32 = 1234;
pub const __LONG_MAX: u64 = 9223372036854775807;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __USE_TIME_BITS64: u32 = 1;
pub const LBER_USE_DER: u32 = 1;
pub const LBER_OPT_BER_OPTIONS: u32 = 1;
pub const LBER_OPT_BER_DEBUG: u32 = 2;
pub const LBER_OPT_BER_REMAINING_BYTES: u32 = 3;
pub const LBER_OPT_BER_TOTAL_BYTES: u32 = 4;
pub const LBER_OPT_BER_BYTES_TO_WRITE: u32 = 5;
pub const LBER_OPT_BER_MEMCTX: u32 = 6;
pub const LBER_OPT_DEBUG_LEVEL: u32 = 2;
pub const LBER_OPT_REMAINING_BYTES: u32 = 3;
pub const LBER_OPT_TOTAL_BYTES: u32 = 4;
pub const LBER_OPT_BYTES_TO_WRITE: u32 = 5;
pub const LBER_OPT_LOG_PRINT_FN: u32 = 32769;
pub const LBER_OPT_MEMORY_FNS: u32 = 32770;
pub const LBER_OPT_ERROR_FN: u32 = 32771;
pub const LBER_OPT_LOG_PRINT_FILE: u32 = 32772;
pub const LBER_OPT_MEMORY_INUSE: u32 = 32773;
pub const LBER_OPT_LOG_PROC: u32 = 32774;
pub const LBER_SB_OPT_GET_FD: u32 = 1;
pub const LBER_SB_OPT_SET_FD: u32 = 2;
pub const LBER_SB_OPT_HAS_IO: u32 = 3;
pub const LBER_SB_OPT_SET_NONBLOCK: u32 = 4;
pub const LBER_SB_OPT_GET_SSL: u32 = 7;
pub const LBER_SB_OPT_DATA_READY: u32 = 8;
pub const LBER_SB_OPT_SET_READAHEAD: u32 = 9;
pub const LBER_SB_OPT_DRAIN: u32 = 10;
pub const LBER_SB_OPT_NEEDS_READ: u32 = 11;
pub const LBER_SB_OPT_NEEDS_WRITE: u32 = 12;
pub const LBER_SB_OPT_GET_MAX_INCOMING: u32 = 13;
pub const LBER_SB_OPT_SET_MAX_INCOMING: u32 = 14;
pub const LBER_SB_OPT_UNGET_BUF: u32 = 15;
pub const LBER_SB_OPT_OPT_MAX: u32 = 15;
pub const LBER_SBIOD_LEVEL_PROVIDER: u32 = 10;
pub const LBER_SBIOD_LEVEL_TRANSPORT: u32 = 20;
pub const LBER_SBIOD_LEVEL_APPLICATION: u32 = 30;
pub const LBER_OPT_SOCKBUF_DESC: u32 = 4096;
pub const LBER_OPT_SOCKBUF_OPTIONS: u32 = 4097;
pub const LBER_OPT_SOCKBUF_DEBUG: u32 = 4098;
pub const LBER_OPT_SUCCESS: u32 = 0;
pub const LBER_OPT_ERROR: i32 = -1;
pub const LBER_BV_ALLOC: u32 = 1;
pub const LBER_BV_NOTERM: u32 = 2;
pub const LBER_BV_STRING: u32 = 4;
pub const LBER_FLUSH_FREE_NEVER: u32 = 0;
pub const LBER_FLUSH_FREE_ON_SUCCESS: u32 = 1;
pub const LBER_FLUSH_FREE_ON_ERROR: u32 = 2;
pub const LBER_FLUSH_FREE_ALWAYS: u32 = 3;
pub const LBER_ERROR_NONE: u32 = 0;
pub const LBER_ERROR_PARAM: u32 = 1;
pub const LBER_ERROR_MEMORY: u32 = 2;
pub const _LDAP_FEATURES_H: u32 = 1;
pub const LDAP_VENDOR_VERSION: u32 = 20608;
pub const LDAP_VENDOR_VERSION_MAJOR: u32 = 2;
pub const LDAP_VENDOR_VERSION_MINOR: u32 = 6;
pub const LDAP_VENDOR_VERSION_PATCH: u32 = 8;
pub const LDAP_API_FEATURE_X_OPENLDAP_REENTRANT: u32 = 1;
pub const LDAP_API_FEATURE_X_OPENLDAP_THREAD_SAFE: u32 = 1;
pub const LDAP_VERSION1: u32 = 1;
pub const LDAP_VERSION2: u32 = 2;
pub const LDAP_VERSION3: u32 = 3;
pub const LDAP_VERSION_MIN: u32 = 2;
pub const LDAP_VERSION: u32 = 2;
pub const LDAP_VERSION_MAX: u32 = 3;
pub const LDAP_API_VERSION: u32 = 3001;
pub const LDAP_VENDOR_NAME: &[u8; 9] = b"OpenLDAP\0";
pub const LDAP_API_FEATURE_X_OPENLDAP: u32 = 20608;
pub const LDAP_API_FEATURE_THREAD_SAFE: u32 = 1;
pub const LDAP_API_FEATURE_SESSION_THREAD_SAFE: u32 = 1;
pub const LDAP_API_FEATURE_OPERATION_THREAD_SAFE: u32 = 1;
pub const LDAP_PORT: u32 = 389;
pub const LDAPS_PORT: u32 = 636;
pub const LDAP_ROOT_DSE: &[u8; 1] = b"\0";
pub const LDAP_NO_ATTRS: &[u8; 4] = b"1.1\0";
pub const LDAP_ALL_USER_ATTRIBUTES: &[u8; 2] = b"*\0";
pub const LDAP_ALL_OPERATIONAL_ATTRIBUTES: &[u8; 2] = b"+\0";
pub const LDAP_MAXINT: u32 = 2147483647;
pub const LDAP_OPT_API_INFO: u32 = 0;
pub const LDAP_OPT_DESC: u32 = 1;
pub const LDAP_OPT_DEREF: u32 = 2;
pub const LDAP_OPT_SIZELIMIT: u32 = 3;
pub const LDAP_OPT_TIMELIMIT: u32 = 4;
pub const LDAP_OPT_REFERRALS: u32 = 8;
pub const LDAP_OPT_RESTART: u32 = 9;
pub const LDAP_OPT_PROTOCOL_VERSION: u32 = 17;
pub const LDAP_OPT_SERVER_CONTROLS: u32 = 18;
pub const LDAP_OPT_CLIENT_CONTROLS: u32 = 19;
pub const LDAP_OPT_API_FEATURE_INFO: u32 = 21;
pub const LDAP_OPT_HOST_NAME: u32 = 48;
pub const LDAP_OPT_RESULT_CODE: u32 = 49;
pub const LDAP_OPT_ERROR_NUMBER: u32 = 49;
pub const LDAP_OPT_DIAGNOSTIC_MESSAGE: u32 = 50;
pub const LDAP_OPT_ERROR_STRING: u32 = 50;
pub const LDAP_OPT_MATCHED_DN: u32 = 51;
pub const LDAP_OPT_SSPI_FLAGS: u32 = 146;
pub const LDAP_OPT_SIGN: u32 = 149;
pub const LDAP_OPT_ENCRYPT: u32 = 150;
pub const LDAP_OPT_SASL_METHOD: u32 = 151;
pub const LDAP_OPT_SECURITY_CONTEXT: u32 = 153;
pub const LDAP_OPT_API_EXTENSION_BASE: u32 = 16384;
pub const LDAP_OPT_DEBUG_LEVEL: u32 = 20481;
pub const LDAP_OPT_TIMEOUT: u32 = 20482;
pub const LDAP_OPT_REFHOPLIMIT: u32 = 20483;
pub const LDAP_OPT_NETWORK_TIMEOUT: u32 = 20485;
pub const LDAP_OPT_URI: u32 = 20486;
pub const LDAP_OPT_REFERRAL_URLS: u32 = 20487;
pub const LDAP_OPT_SOCKBUF: u32 = 20488;
pub const LDAP_OPT_DEFBASE: u32 = 20489;
pub const LDAP_OPT_CONNECT_ASYNC: u32 = 20496;
pub const LDAP_OPT_CONNECT_CB: u32 = 20497;
pub const LDAP_OPT_SESSION_REFCNT: u32 = 20498;
pub const LDAP_OPT_KEEPCONN: u32 = 20499;
pub const LDAP_OPT_SOCKET_BIND_ADDRESSES: u32 = 20500;
pub const LDAP_OPT_TCP_USER_TIMEOUT: u32 = 20501;
pub const LDAP_OPT_X_TLS: u32 = 24576;
pub const LDAP_OPT_X_TLS_CTX: u32 = 24577;
pub const LDAP_OPT_X_TLS_CACERTFILE: u32 = 24578;
pub const LDAP_OPT_X_TLS_CACERTDIR: u32 = 24579;
pub const LDAP_OPT_X_TLS_CERTFILE: u32 = 24580;
pub const LDAP_OPT_X_TLS_KEYFILE: u32 = 24581;
pub const LDAP_OPT_X_TLS_REQUIRE_CERT: u32 = 24582;
pub const LDAP_OPT_X_TLS_PROTOCOL_MIN: u32 = 24583;
pub const LDAP_OPT_X_TLS_CIPHER_SUITE: u32 = 24584;
pub const LDAP_OPT_X_TLS_RANDOM_FILE: u32 = 24585;
pub const LDAP_OPT_X_TLS_SSL_CTX: u32 = 24586;
pub const LDAP_OPT_X_TLS_CRLCHECK: u32 = 24587;
pub const LDAP_OPT_X_TLS_CONNECT_CB: u32 = 24588;
pub const LDAP_OPT_X_TLS_CONNECT_ARG: u32 = 24589;
pub const LDAP_OPT_X_TLS_DHFILE: u32 = 24590;
pub const LDAP_OPT_X_TLS_NEWCTX: u32 = 24591;
pub const LDAP_OPT_X_TLS_CRLFILE: u32 = 24592;
pub const LDAP_OPT_X_TLS_PACKAGE: u32 = 24593;
pub const LDAP_OPT_X_TLS_ECNAME: u32 = 24594;
pub const LDAP_OPT_X_TLS_VERSION: u32 = 24595;
pub const LDAP_OPT_X_TLS_CIPHER: u32 = 24596;
pub const LDAP_OPT_X_TLS_PEERCERT: u32 = 24597;
pub const LDAP_OPT_X_TLS_CACERT: u32 = 24598;
pub const LDAP_OPT_X_TLS_CERT: u32 = 24599;
pub const LDAP_OPT_X_TLS_KEY: u32 = 24600;
pub const LDAP_OPT_X_TLS_PEERKEY_HASH: u32 = 24601;
pub const LDAP_OPT_X_TLS_REQUIRE_SAN: u32 = 24602;
pub const LDAP_OPT_X_TLS_PROTOCOL_MAX: u32 = 24603;
pub const LDAP_OPT_X_TLS_NEVER: u32 = 0;
pub const LDAP_OPT_X_TLS_HARD: u32 = 1;
pub const LDAP_OPT_X_TLS_DEMAND: u32 = 2;
pub const LDAP_OPT_X_TLS_ALLOW: u32 = 3;
pub const LDAP_OPT_X_TLS_TRY: u32 = 4;
pub const LDAP_OPT_X_TLS_CRL_NONE: u32 = 0;
pub const LDAP_OPT_X_TLS_CRL_PEER: u32 = 1;
pub const LDAP_OPT_X_TLS_CRL_ALL: u32 = 2;
pub const LDAP_OPT_X_TLS_PROTOCOL_SSL2: u32 = 512;
pub const LDAP_OPT_X_TLS_PROTOCOL_SSL3: u32 = 768;
pub const LDAP_OPT_X_TLS_PROTOCOL_TLS1_0: u32 = 769;
pub const LDAP_OPT_X_TLS_PROTOCOL_TLS1_1: u32 = 770;
pub const LDAP_OPT_X_TLS_PROTOCOL_TLS1_2: u32 = 771;
pub const LDAP_OPT_X_TLS_PROTOCOL_TLS1_3: u32 = 772;
pub const LDAP_OPT_X_SASL_CBINDING_NONE: u32 = 0;
pub const LDAP_OPT_X_SASL_CBINDING_TLS_UNIQUE: u32 = 1;
pub const LDAP_OPT_X_SASL_CBINDING_TLS_ENDPOINT: u32 = 2;
pub const LDAP_OPT_X_SASL_MECH: u32 = 24832;
pub const LDAP_OPT_X_SASL_REALM: u32 = 24833;
pub const LDAP_OPT_X_SASL_AUTHCID: u32 = 24834;
pub const LDAP_OPT_X_SASL_AUTHZID: u32 = 24835;
pub const LDAP_OPT_X_SASL_SSF: u32 = 24836;
pub const LDAP_OPT_X_SASL_SSF_EXTERNAL: u32 = 24837;
pub const LDAP_OPT_X_SASL_SECPROPS: u32 = 24838;
pub const LDAP_OPT_X_SASL_SSF_MIN: u32 = 24839;
pub const LDAP_OPT_X_SASL_SSF_MAX: u32 = 24840;
pub const LDAP_OPT_X_SASL_MAXBUFSIZE: u32 = 24841;
pub const LDAP_OPT_X_SASL_MECHLIST: u32 = 24842;
pub const LDAP_OPT_X_SASL_NOCANON: u32 = 24843;
pub const LDAP_OPT_X_SASL_USERNAME: u32 = 24844;
pub const LDAP_OPT_X_SASL_GSS_CREDS: u32 = 24845;
pub const LDAP_OPT_X_SASL_CBINDING: u32 = 24846;
pub const LDAP_OPT_X_KEEPALIVE_IDLE: u32 = 25344;
pub const LDAP_OPT_X_KEEPALIVE_PROBES: u32 = 25345;
pub const LDAP_OPT_X_KEEPALIVE_INTERVAL: u32 = 25346;
pub const LDAP_OPT_PRIVATE_EXTENSION_BASE: u32 = 28672;
pub const LDAP_OPT_SUCCESS: u32 = 0;
pub const LDAP_OPT_ERROR: i32 = -1;
pub const LDAP_API_INFO_VERSION: u32 = 1;
pub const LDAP_FEATURE_INFO_VERSION: u32 = 1;
pub const LDAP_CONTROL_MANAGEDSAIT: &[u8; 24] = b"2.16.840.1.113730.3.4.2\0";
pub const LDAP_CONTROL_PROXY_AUTHZ: &[u8; 25] = b"2.16.840.1.113730.3.4.18\0";
pub const LDAP_CONTROL_SUBENTRIES: &[u8; 24] = b"1.3.6.1.4.1.4203.1.10.1\0";
pub const LDAP_CONTROL_VALUESRETURNFILTER: &[u8; 24] = b"1.2.826.0.1.3344810.2.3\0";
pub const LDAP_CONTROL_ASSERT: &[u8; 13] = b"1.3.6.1.1.12\0";
pub const LDAP_CONTROL_PRE_READ: &[u8; 15] = b"1.3.6.1.1.13.1\0";
pub const LDAP_CONTROL_POST_READ: &[u8; 15] = b"1.3.6.1.1.13.2\0";
pub const LDAP_CONTROL_SORTREQUEST: &[u8; 23] = b"1.2.840.113556.1.4.473\0";
pub const LDAP_CONTROL_SORTRESPONSE: &[u8; 23] = b"1.2.840.113556.1.4.474\0";
pub const LDAP_CONTROL_PAGEDRESULTS: &[u8; 23] = b"1.2.840.113556.1.4.319\0";
pub const LDAP_CONTROL_AUTHZID_REQUEST: &[u8; 25] = b"2.16.840.1.113730.3.4.16\0";
pub const LDAP_CONTROL_AUTHZID_RESPONSE: &[u8; 25] = b"2.16.840.1.113730.3.4.15\0";
pub const LDAP_SYNC_OID: &[u8; 23] = b"1.3.6.1.4.1.4203.1.9.1\0";
pub const LDAP_CONTROL_SYNC: &[u8; 25] = b"1.3.6.1.4.1.4203.1.9.1.1\0";
pub const LDAP_CONTROL_SYNC_STATE: &[u8; 25] = b"1.3.6.1.4.1.4203.1.9.1.2\0";
pub const LDAP_CONTROL_SYNC_DONE: &[u8; 25] = b"1.3.6.1.4.1.4203.1.9.1.3\0";
pub const LDAP_SYNC_INFO: &[u8; 25] = b"1.3.6.1.4.1.4203.1.9.1.4\0";
pub const LDAP_SYNC_NONE: u32 = 0;
pub const LDAP_SYNC_REFRESH_ONLY: u32 = 1;
pub const LDAP_SYNC_RESERVED: u32 = 2;
pub const LDAP_SYNC_REFRESH_AND_PERSIST: u32 = 3;
pub const LDAP_SYNC_REFRESH_PRESENTS: u32 = 0;
pub const LDAP_SYNC_REFRESH_DELETES: u32 = 1;
pub const LDAP_SYNC_PRESENT: u32 = 0;
pub const LDAP_SYNC_ADD: u32 = 1;
pub const LDAP_SYNC_MODIFY: u32 = 2;
pub const LDAP_SYNC_DELETE: u32 = 3;
pub const LDAP_SYNC_NEW_COOKIE: u32 = 4;
pub const LDAP_CONTROL_DONTUSECOPY: &[u8; 13] = b"1.3.6.1.1.22\0";
pub const LDAP_CONTROL_PASSWORDPOLICYREQUEST: &[u8; 26] = b"1.3.6.1.4.1.42.2.27.8.5.1\0";
pub const LDAP_CONTROL_PASSWORDPOLICYRESPONSE: &[u8; 26] = b"1.3.6.1.4.1.42.2.27.8.5.1\0";
pub const LDAP_CONTROL_NOOP: &[u8; 25] = b"1.3.6.1.4.1.4203.666.5.2\0";
pub const LDAP_CONTROL_NO_SUBORDINATES: &[u8; 26] = b"1.3.6.1.4.1.4203.666.5.11\0";
pub const LDAP_CONTROL_RELAX: &[u8; 26] = b"1.3.6.1.4.1.4203.666.5.12\0";
pub const LDAP_CONTROL_MANAGEDIT: &[u8; 26] = b"1.3.6.1.4.1.4203.666.5.12\0";
pub const LDAP_CONTROL_SLURP: &[u8; 26] = b"1.3.6.1.4.1.4203.666.5.13\0";
pub const LDAP_CONTROL_VALSORT: &[u8; 26] = b"1.3.6.1.4.1.4203.666.5.14\0";
pub const LDAP_CONTROL_X_DEREF: &[u8; 26] = b"1.3.6.1.4.1.4203.666.5.16\0";
pub const LDAP_CONTROL_X_WHATFAILED: &[u8; 26] = b"1.3.6.1.4.1.4203.666.5.17\0";
pub const LDAP_CONTROL_X_CHAINING_BEHAVIOR: &[u8; 26] = b"1.3.6.1.4.1.4203.666.11.3\0";
pub const LDAP_CHAINING_PREFERRED: u32 = 0;
pub const LDAP_CHAINING_REQUIRED: u32 = 1;
pub const LDAP_REFERRALS_PREFERRED: u32 = 2;
pub const LDAP_REFERRALS_REQUIRED: u32 = 3;
pub const LDAP_CONTROL_X_LAZY_COMMIT: &[u8; 23] = b"1.2.840.113556.1.4.619\0";
pub const LDAP_CONTROL_X_INCREMENTAL_VALUES: &[u8; 23] = b"1.2.840.113556.1.4.802\0";
pub const LDAP_CONTROL_X_DOMAIN_SCOPE: &[u8; 24] = b"1.2.840.113556.1.4.1339\0";
pub const LDAP_CONTROL_X_PERMISSIVE_MODIFY: &[u8; 24] = b"1.2.840.113556.1.4.1413\0";
pub const LDAP_CONTROL_X_SEARCH_OPTIONS: &[u8; 24] = b"1.2.840.113556.1.4.1340\0";
pub const LDAP_SEARCH_FLAG_DOMAIN_SCOPE: u32 = 1;
pub const LDAP_SEARCH_FLAG_PHANTOM_ROOT: u32 = 2;
pub const LDAP_CONTROL_X_TREE_DELETE: &[u8; 23] = b"1.2.840.113556.1.4.805\0";
pub const LDAP_CONTROL_X_SERVER_NOTIFICATION: &[u8; 23] = b"1.2.840.113556.1.4.528\0";
pub const LDAP_CONTROL_X_EXTENDED_DN: &[u8; 23] = b"1.2.840.113556.1.4.529\0";
pub const LDAP_CONTROL_X_SHOW_DELETED: &[u8; 23] = b"1.2.840.113556.1.4.417\0";
pub const LDAP_CONTROL_X_DIRSYNC: &[u8; 23] = b"1.2.840.113556.1.4.841\0";
pub const LDAP_CONTROL_X_DIRSYNC_OBJECT_SECURITY: u32 = 1;
pub const LDAP_CONTROL_X_DIRSYNC_ANCESTORS_FIRST: u32 = 2048;
pub const LDAP_CONTROL_X_DIRSYNC_PUBLIC_DATA_ONLY: u32 = 8192;
pub const LDAP_CONTROL_X_DIRSYNC_INCREMENTAL_VALUES: u32 = 2147483648;
pub const LDAP_CONTROL_X_SESSION_TRACKING: &[u8; 27] = b"1.3.6.1.4.1.21008.108.63.1\0";
pub const LDAP_CONTROL_X_SESSION_TRACKING_RADIUS_ACCT_SESSION_ID: &[u8; 29] = b"1.3.6.1.4.1.21008.108.63.1.1\0";
pub const LDAP_CONTROL_X_SESSION_TRACKING_RADIUS_ACCT_MULTI_SESSION_ID: &[u8; 29] = b"1.3.6.1.4.1.21008.108.63.1.2\0";
pub const LDAP_CONTROL_X_SESSION_TRACKING_USERNAME: &[u8; 29] = b"1.3.6.1.4.1.21008.108.63.1.3\0";
pub const LDAP_CONTROL_DUPENT_REQUEST: &[u8; 29] = b"2.16.840.1.113719.1.27.101.1\0";
pub const LDAP_CONTROL_DUPENT_RESPONSE: &[u8; 29] = b"2.16.840.1.113719.1.27.101.2\0";
pub const LDAP_CONTROL_DUPENT_ENTRY: &[u8; 29] = b"2.16.840.1.113719.1.27.101.3\0";
pub const LDAP_CONTROL_DUPENT: &[u8; 29] = b"2.16.840.1.113719.1.27.101.1\0";
pub const LDAP_CONTROL_PERSIST_REQUEST: &[u8; 24] = b"2.16.840.1.113730.3.4.3\0";
pub const LDAP_CONTROL_PERSIST_ENTRY_CHANGE_NOTICE: &[u8; 24] = b"2.16.840.1.113730.3.4.7\0";
pub const LDAP_CONTROL_PERSIST_ENTRY_CHANGE_ADD: u32 = 1;
pub const LDAP_CONTROL_PERSIST_ENTRY_CHANGE_DELETE: u32 = 2;
pub const LDAP_CONTROL_PERSIST_ENTRY_CHANGE_MODIFY: u32 = 4;
pub const LDAP_CONTROL_PERSIST_ENTRY_CHANGE_RENAME: u32 = 8;
pub const LDAP_CONTROL_VLVREQUEST: &[u8; 24] = b"2.16.840.1.113730.3.4.9\0";
pub const LDAP_CONTROL_VLVRESPONSE: &[u8; 25] = b"2.16.840.1.113730.3.4.10\0";
pub const LDAP_CONTROL_X_ACCOUNT_USABILITY: &[u8; 26] = b"1.3.6.1.4.1.42.2.27.9.5.8\0";
pub const LDAP_CONTROL_X_PASSWORD_EXPIRED: &[u8; 24] = b"2.16.840.1.113730.3.4.4\0";
pub const LDAP_CONTROL_X_PASSWORD_EXPIRING: &[u8; 24] = b"2.16.840.1.113730.3.4.5\0";
pub const LDAP_NOTICE_OF_DISCONNECTION: &[u8; 23] = b"1.3.6.1.4.1.1466.20036\0";
pub const LDAP_NOTICE_DISCONNECT: &[u8; 23] = b"1.3.6.1.4.1.1466.20036\0";
pub const LDAP_EXOP_START_TLS: &[u8; 23] = b"1.3.6.1.4.1.1466.20037\0";
pub const LDAP_EXOP_MODIFY_PASSWD: &[u8; 24] = b"1.3.6.1.4.1.4203.1.11.1\0";
pub const LDAP_EXOP_CANCEL: &[u8; 12] = b"1.3.6.1.1.8\0";
pub const LDAP_EXOP_X_CANCEL: &[u8; 12] = b"1.3.6.1.1.8\0";
pub const LDAP_EXOP_REFRESH: &[u8; 27] = b"1.3.6.1.4.1.1466.101.119.1\0";
pub const LDAP_EXOP_VERIFY_CREDENTIALS: &[u8; 25] = b"1.3.6.1.4.1.4203.666.6.5\0";
pub const LDAP_EXOP_X_VERIFY_CREDENTIALS: &[u8; 25] = b"1.3.6.1.4.1.4203.666.6.5\0";
pub const LDAP_EXOP_WHO_AM_I: &[u8; 24] = b"1.3.6.1.4.1.4203.1.11.3\0";
pub const LDAP_EXOP_X_WHO_AM_I: &[u8; 24] = b"1.3.6.1.4.1.4203.1.11.3\0";
pub const LDAP_EXOP_TURN: &[u8; 13] = b"1.3.6.1.1.19\0";
pub const LDAP_EXOP_X_TURN: &[u8; 13] = b"1.3.6.1.1.19\0";
pub const LDAP_X_DISTPROC_BASE: &[u8; 26] = b"1.3.6.1.4.1.4203.666.11.6\0";
pub const LDAP_EXOP_X_CHAINEDREQUEST: &[u8; 28] = b"1.3.6.1.4.1.4203.666.11.6.1\0";
pub const LDAP_FEATURE_X_CANCHAINOPS: &[u8; 28] = b"1.3.6.1.4.1.4203.666.11.6.2\0";
pub const LDAP_CONTROL_X_RETURNCONTREF: &[u8; 28] = b"1.3.6.1.4.1.4203.666.11.6.3\0";
pub const LDAP_URLEXT_X_LOCALREFOID: &[u8; 28] = b"1.3.6.1.4.1.4203.666.11.6.4\0";
pub const LDAP_URLEXT_X_REFTYPEOID: &[u8; 28] = b"1.3.6.1.4.1.4203.666.11.6.5\0";
pub const LDAP_URLEXT_X_SEARCHEDSUBTREEOID: &[u8; 28] = b"1.3.6.1.4.1.4203.666.11.6.6\0";
pub const LDAP_URLEXT_X_FAILEDNAMEOID: &[u8; 28] = b"1.3.6.1.4.1.4203.666.11.6.7\0";
pub const LDAP_URLEXT_X_LOCALREF: &[u8; 17] = b"x-localReference\0";
pub const LDAP_URLEXT_X_REFTYPE: &[u8; 16] = b"x-referenceType\0";
pub const LDAP_URLEXT_X_SEARCHEDSUBTREE: &[u8; 18] = b"x-searchedSubtree\0";
pub const LDAP_URLEXT_X_FAILEDNAME: &[u8; 13] = b"x-failedName\0";
pub const LDAP_TXN: &[u8; 13] = b"1.3.6.1.1.21\0";
pub const LDAP_EXOP_TXN_START: &[u8; 15] = b"1.3.6.1.1.21.1\0";
pub const LDAP_CONTROL_TXN_SPEC: &[u8; 15] = b"1.3.6.1.1.21.2\0";
pub const LDAP_EXOP_TXN_END: &[u8; 15] = b"1.3.6.1.1.21.3\0";
pub const LDAP_EXOP_TXN_ABORTED_NOTICE: &[u8; 15] = b"1.3.6.1.1.21.4\0";
pub const LDAP_FEATURE_ALL_OP_ATTRS: &[u8; 23] = b"1.3.6.1.4.1.4203.1.5.1\0";
pub const LDAP_FEATURE_OBJECTCLASS_ATTRS: &[u8; 23] = b"1.3.6.1.4.1.4203.1.5.2\0";
pub const LDAP_FEATURE_ABSOLUTE_FILTERS: &[u8; 23] = b"1.3.6.1.4.1.4203.1.5.3\0";
pub const LDAP_FEATURE_LANGUAGE_TAG_OPTIONS: &[u8; 23] = b"1.3.6.1.4.1.4203.1.5.4\0";
pub const LDAP_FEATURE_LANGUAGE_RANGE_OPTIONS: &[u8; 23] = b"1.3.6.1.4.1.4203.1.5.5\0";
pub const LDAP_FEATURE_MODIFY_INCREMENT: &[u8; 13] = b"1.3.6.1.1.14\0";
pub const LDAP_FEATURE_SUBORDINATE_SCOPE: &[u8; 25] = b"1.3.6.1.4.1.4203.666.8.1\0";
pub const LDAP_FEATURE_CHILDREN_SCOPE: &[u8; 25] = b"1.3.6.1.4.1.4203.666.8.1\0";
pub const LDAP_RES_ANY: i32 = -1;
pub const LDAP_RES_UNSOLICITED: u32 = 0;
pub const LDAP_SASL_NULL: &[u8; 1] = b"\0";
pub const LDAP_SUCCESS: u32 = 0;
pub const LDAP_OPERATIONS_ERROR: u32 = 1;
pub const LDAP_PROTOCOL_ERROR: u32 = 2;
pub const LDAP_TIMELIMIT_EXCEEDED: u32 = 3;
pub const LDAP_SIZELIMIT_EXCEEDED: u32 = 4;
pub const LDAP_COMPARE_FALSE: u32 = 5;
pub const LDAP_COMPARE_TRUE: u32 = 6;
pub const LDAP_AUTH_METHOD_NOT_SUPPORTED: u32 = 7;
pub const LDAP_STRONG_AUTH_NOT_SUPPORTED: u32 = 7;
pub const LDAP_STRONG_AUTH_REQUIRED: u32 = 8;
pub const LDAP_STRONGER_AUTH_REQUIRED: u32 = 8;
pub const LDAP_PARTIAL_RESULTS: u32 = 9;
pub const LDAP_REFERRAL: u32 = 10;
pub const LDAP_ADMINLIMIT_EXCEEDED: u32 = 11;
pub const LDAP_UNAVAILABLE_CRITICAL_EXTENSION: u32 = 12;
pub const LDAP_CONFIDENTIALITY_REQUIRED: u32 = 13;
pub const LDAP_SASL_BIND_IN_PROGRESS: u32 = 14;
pub const LDAP_NO_SUCH_ATTRIBUTE: u32 = 16;
pub const LDAP_UNDEFINED_TYPE: u32 = 17;
pub const LDAP_INAPPROPRIATE_MATCHING: u32 = 18;
pub const LDAP_CONSTRAINT_VIOLATION: u32 = 19;
pub const LDAP_TYPE_OR_VALUE_EXISTS: u32 = 20;
pub const LDAP_INVALID_SYNTAX: u32 = 21;
pub const LDAP_NO_SUCH_OBJECT: u32 = 32;
pub const LDAP_ALIAS_PROBLEM: u32 = 33;
pub const LDAP_INVALID_DN_SYNTAX: u32 = 34;
pub const LDAP_IS_LEAF: u32 = 35;
pub const LDAP_ALIAS_DEREF_PROBLEM: u32 = 36;
pub const LDAP_X_PROXY_AUTHZ_FAILURE: u32 = 47;
pub const LDAP_INAPPROPRIATE_AUTH: u32 = 48;
pub const LDAP_INVALID_CREDENTIALS: u32 = 49;
pub const LDAP_INSUFFICIENT_ACCESS: u32 = 50;
pub const LDAP_BUSY: u32 = 51;
pub const LDAP_UNAVAILABLE: u32 = 52;
pub const LDAP_UNWILLING_TO_PERFORM: u32 = 53;
pub const LDAP_LOOP_DETECT: u32 = 54;
pub const LDAP_NAMING_VIOLATION: u32 = 64;
pub const LDAP_OBJECT_CLASS_VIOLATION: u32 = 65;
pub const LDAP_NOT_ALLOWED_ON_NONLEAF: u32 = 66;
pub const LDAP_NOT_ALLOWED_ON_RDN: u32 = 67;
pub const LDAP_ALREADY_EXISTS: u32 = 68;
pub const LDAP_NO_OBJECT_CLASS_MODS: u32 = 69;
pub const LDAP_RESULTS_TOO_LARGE: u32 = 70;
pub const LDAP_AFFECTS_MULTIPLE_DSAS: u32 = 71;
pub const LDAP_VLV_ERROR: u32 = 76;
pub const LDAP_OTHER: u32 = 80;
pub const LDAP_CUP_RESOURCES_EXHAUSTED: u32 = 113;
pub const LDAP_CUP_SECURITY_VIOLATION: u32 = 114;
pub const LDAP_CUP_INVALID_DATA: u32 = 115;
pub const LDAP_CUP_UNSUPPORTED_SCHEME: u32 = 116;
pub const LDAP_CUP_RELOAD_REQUIRED: u32 = 117;
pub const LDAP_CANCELLED: u32 = 118;
pub const LDAP_NO_SUCH_OPERATION: u32 = 119;
pub const LDAP_TOO_LATE: u32 = 120;
pub const LDAP_CANNOT_CANCEL: u32 = 121;
pub const LDAP_ASSERTION_FAILED: u32 = 122;
pub const LDAP_PROXIED_AUTHORIZATION_DENIED: u32 = 123;
pub const LDAP_SYNC_REFRESH_REQUIRED: u32 = 4096;
pub const LDAP_X_SYNC_REFRESH_REQUIRED: u32 = 16640;
pub const LDAP_X_ASSERTION_FAILED: u32 = 16655;
pub const LDAP_X_NO_OPERATION: u32 = 16654;
pub const LDAP_X_NO_REFERRALS_FOUND: u32 = 16656;
pub const LDAP_X_CANNOT_CHAIN: u32 = 16657;
pub const LDAP_X_INVALIDREFERENCE: u32 = 16658;
pub const LDAP_TXN_SPECIFY_OKAY: u32 = 16672;
pub const LDAP_TXN_ID_INVALID: u32 = 16673;
pub const LDAP_SERVER_DOWN: i32 = -1;
pub const LDAP_LOCAL_ERROR: i32 = -2;
pub const LDAP_ENCODING_ERROR: i32 = -3;
pub const LDAP_DECODING_ERROR: i32 = -4;
pub const LDAP_TIMEOUT: i32 = -5;
pub const LDAP_AUTH_UNKNOWN: i32 = -6;
pub const LDAP_FILTER_ERROR: i32 = -7;
pub const LDAP_USER_CANCELLED: i32 = -8;
pub const LDAP_PARAM_ERROR: i32 = -9;
pub const LDAP_NO_MEMORY: i32 = -10;
pub const LDAP_CONNECT_ERROR: i32 = -11;
pub const LDAP_NOT_SUPPORTED: i32 = -12;
pub const LDAP_CONTROL_NOT_FOUND: i32 = -13;
pub const LDAP_NO_RESULTS_RETURNED: i32 = -14;
pub const LDAP_MORE_RESULTS_TO_RETURN: i32 = -15;
pub const LDAP_CLIENT_LOOP: i32 = -16;
pub const LDAP_REFERRAL_LIMIT_EXCEEDED: i32 = -17;
pub const LDAP_X_CONNECTING: i32 = -18;
pub const LDAP_MOD_OP: u32 = 7;
pub const LDAP_MOD_ADD: u32 = 0;
pub const LDAP_MOD_DELETE: u32 = 1;
pub const LDAP_MOD_REPLACE: u32 = 2;
pub const LDAP_MOD_INCREMENT: u32 = 3;
pub const LDAP_MOD_BVALUES: u32 = 128;
pub const LDAP_DEREF_NEVER: u32 = 0;
pub const LDAP_DEREF_SEARCHING: u32 = 1;
pub const LDAP_DEREF_FINDING: u32 = 2;
pub const LDAP_DEREF_ALWAYS: u32 = 3;
pub const LDAP_NO_LIMIT: u32 = 0;
pub const LDAP_MSG_ONE: u32 = 0;
pub const LDAP_MSG_ALL: u32 = 1;
pub const LDAP_MSG_RECEIVED: u32 = 2;
pub const LDAP_URL_SUCCESS: u32 = 0;
pub const LDAP_URL_ERR_MEM: u32 = 1;
pub const LDAP_URL_ERR_PARAM: u32 = 2;
pub const LDAP_URL_ERR_BADSCHEME: u32 = 3;
pub const LDAP_URL_ERR_BADENCLOSURE: u32 = 4;
pub const LDAP_URL_ERR_BADURL: u32 = 5;
pub const LDAP_URL_ERR_BADHOST: u32 = 6;
pub const LDAP_URL_ERR_BADATTRS: u32 = 7;
pub const LDAP_URL_ERR_BADSCOPE: u32 = 8;
pub const LDAP_URL_ERR_BADFILTER: u32 = 9;
pub const LDAP_URL_ERR_BADEXTS: u32 = 10;
pub const LDAP_SASL_AUTOMATIC: u32 = 0;
pub const LDAP_SASL_INTERACTIVE: u32 = 1;
pub const LDAP_SASL_QUIET: u32 = 2;
pub const LDAP_AVA_NULL: u32 = 0;
pub const LDAP_AVA_STRING: u32 = 1;
pub const LDAP_AVA_BINARY: u32 = 2;
pub const LDAP_AVA_NONPRINTABLE: u32 = 4;
pub const LDAP_AVA_FREE_ATTR: u32 = 16;
pub const LDAP_AVA_FREE_VALUE: u32 = 32;
pub const LDAP_DN_FORMAT_LDAP: u32 = 0;
pub const LDAP_DN_FORMAT_LDAPV3: u32 = 16;
pub const LDAP_DN_FORMAT_LDAPV2: u32 = 32;
pub const LDAP_DN_FORMAT_DCE: u32 = 48;
pub const LDAP_DN_FORMAT_UFN: u32 = 64;
pub const LDAP_DN_FORMAT_AD_CANONICAL: u32 = 80;
pub const LDAP_DN_FORMAT_LBER: u32 = 240;
pub const LDAP_DN_FORMAT_MASK: u32 = 240;
pub const LDAP_DN_PRETTY: u32 = 256;
pub const LDAP_DN_SKIP: u32 = 512;
pub const LDAP_DN_P_NOLEADTRAILSPACES: u32 = 4096;
pub const LDAP_DN_P_NOSPACEAFTERRDN: u32 = 8192;
pub const LDAP_DN_PEDANTIC: u32 = 61440;
pub const LDAP_API_FEATURE_CANCEL: u32 = 1000;
pub const LDAP_API_FEATURE_TURN: u32 = 1000;
pub const LDAP_API_FEATURE_PAGED_RESULTS: u32 = 2000;
pub const LDAP_API_FEATURE_SERVER_SIDE_SORT: u32 = 2000;
pub const LDAP_API_FEATURE_VIRTUAL_LIST_VIEW: u32 = 2000;
pub const LDAP_API_FEATURE_VERIFY_CREDENTIALS: u32 = 1000;
pub const LDAP_API_FEATURE_WHOAMI: u32 = 1000;
pub const LDAP_API_FEATURE_PASSWD_MODIFY: u32 = 1000;
pub const LDAP_API_FEATURE_PASSWORD_POLICY: u32 = 1000;
pub const LDAP_API_FEATURE_REFRESH: u32 = 1000;
pub const LDIF_DEFAULT_ADD: u32 = 1;
pub const LDIF_ENTRIES_ONLY: u32 = 2;
pub const LDIF_NO_CONTROLS: u32 = 4;
pub const LDIF_MODS_ONLY: u32 = 8;
pub const LDIF_NO_DN: u32 = 16;
pub const SASL_H: u32 = 1;
pub const SASL_VERSION_MAJOR: u32 = 2;
pub const SASL_VERSION_MINOR: u32 = 1;
pub const SASL_VERSION_STEP: u32 = 28;
pub const SASL_VERSION_FULL: u32 = 131356;
pub const PROP_H: u32 = 1;
pub const PROP_DEFAULT: u32 = 4;
pub const SASL_CONTINUE: u32 = 1;
pub const SASL_OK: u32 = 0;
pub const SASL_FAIL: i32 = -1;
pub const SASL_NOMEM: i32 = -2;
pub const SASL_BUFOVER: i32 = -3;
pub const SASL_NOMECH: i32 = -4;
pub const SASL_BADPROT: i32 = -5;
pub const SASL_NOTDONE: i32 = -6;
pub const SASL_BADPARAM: i32 = -7;
pub const SASL_TRYAGAIN: i32 = -8;
pub const SASL_BADMAC: i32 = -9;
pub const SASL_NOTINIT: i32 = -12;
pub const SASL_INTERACT: u32 = 2;
pub const SASL_BADSERV: i32 = -10;
pub const SASL_WRONGMECH: i32 = -11;
pub const SASL_BADAUTH: i32 = -13;
pub const SASL_NOAUTHZ: i32 = -14;
pub const SASL_TOOWEAK: i32 = -15;
pub const SASL_ENCRYPT: i32 = -16;
pub const SASL_TRANS: i32 = -17;
pub const SASL_EXPIRED: i32 = -18;
pub const SASL_DISABLED: i32 = -19;
pub const SASL_NOUSER: i32 = -20;
pub const SASL_BADVERS: i32 = -23;
pub const SASL_UNAVAIL: i32 = -24;
pub const SASL_NOVERIFY: i32 = -26;
pub const SASL_PWLOCK: i32 = -21;
pub const SASL_NOCHANGE: i32 = -22;
pub const SASL_WEAKPASS: i32 = -27;
pub const SASL_NOUSERPASS: i32 = -28;
pub const SASL_NEED_OLD_PASSWD: i32 = -29;
pub const SASL_CONSTRAINT_VIOLAT: i32 = -30;
pub const SASL_BADBINDING: i32 = -32;
pub const SASL_CONFIGERR: i32 = -100;
pub const SASL_MECHNAMEMAX: u32 = 20;
pub const __PDP_ENDIAN: u32 = 3412;
pub const BIG_ENDIAN: u32 = 4321;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const FD_SETSIZE: u32 = 1024;
pub const SASL_SUCCESS_DATA: u32 = 4;
pub const SASL_NEED_PROXY: u32 = 8;
pub const SASL_NEED_HTTP: u32 = 16;
pub const SASL_SEC_NOPLAINTEXT: u32 = 1;
pub const SASL_SEC_NOACTIVE: u32 = 2;
pub const SASL_SEC_NODICTIONARY: u32 = 4;
pub const SASL_SEC_FORWARD_SECRECY: u32 = 8;
pub const SASL_SEC_NOANONYMOUS: u32 = 16;
pub const SASL_SEC_PASS_CREDENTIALS: u32 = 32;
pub const SASL_SEC_MUTUAL_AUTH: u32 = 64;
pub const SASL_SEC_MAXIMUM: u32 = 65535;
pub const SASL_CB_LIST_END: u32 = 0;
pub const SASL_CB_GETOPT: u32 = 1;
pub const SASL_LOG_NONE: u32 = 0;
pub const SASL_LOG_ERR: u32 = 1;
pub const SASL_LOG_FAIL: u32 = 2;
pub const SASL_LOG_WARN: u32 = 3;
pub const SASL_LOG_NOTE: u32 = 4;
pub const SASL_LOG_DEBUG: u32 = 5;
pub const SASL_LOG_TRACE: u32 = 6;
pub const SASL_LOG_PASS: u32 = 7;
pub const SASL_CB_LOG: u32 = 2;
pub const SASL_CB_GETPATH: u32 = 3;
pub const SASL_CB_VERIFYFILE: u32 = 4;
pub const SASL_CB_GETCONFPATH: u32 = 5;
pub const SASL_CB_USER: u32 = 16385;
pub const SASL_CB_AUTHNAME: u32 = 16386;
pub const SASL_CB_LANGUAGE: u32 = 16387;
pub const SASL_CB_CNONCE: u32 = 16391;
pub const SASL_CB_PASS: u32 = 16388;
pub const SASL_CB_ECHOPROMPT: u32 = 16389;
pub const SASL_CB_NOECHOPROMPT: u32 = 16390;
pub const SASL_CB_GETREALM: u32 = 16392;
pub const SASL_CB_PROXY_POLICY: u32 = 32769;
pub const SASL_CB_SERVER_USERDB_CHECKPASS: u32 = 32773;
pub const SASL_CB_SERVER_USERDB_SETPASS: u32 = 32774;
pub const SASL_CU_NONE: u32 = 0;
pub const SASL_CU_AUTHID: u32 = 1;
pub const SASL_CU_AUTHZID: u32 = 2;
pub const SASL_CU_EXTERNALLY_VERIFIED: u32 = 4;
pub const SASL_CU_OVERRIDE: u32 = 8;
pub const SASL_CU_ASIS_MASK: u32 = 65520;
pub const SASL_CU_VERIFY_AGAINST_HASH: u32 = 16;
pub const SASL_CB_CANON_USER: u32 = 32775;
pub const SASL_PATH_TYPE_PLUGIN: u32 = 0;
pub const SASL_PATH_TYPE_CONFIG: u32 = 1;
pub const SASL_NOLOG: u32 = 1;
pub const SASL_USERNAME: u32 = 0;
pub const SASL_SSF: u32 = 1;
pub const SASL_MAXOUTBUF: u32 = 2;
pub const SASL_DEFUSERREALM: u32 = 3;
pub const SASL_GETOPTCTX: u32 = 4;
pub const SASL_CALLBACK: u32 = 7;
pub const SASL_IPLOCALPORT: u32 = 8;
pub const SASL_IPREMOTEPORT: u32 = 9;
pub const SASL_PLUGERR: u32 = 10;
pub const SASL_DELEGATEDCREDS: u32 = 11;
pub const SASL_SERVICE: u32 = 12;
pub const SASL_SERVERFQDN: u32 = 13;
pub const SASL_AUTHSOURCE: u32 = 14;
pub const SASL_MECHNAME: u32 = 15;
pub const SASL_AUTHUSER: u32 = 16;
pub const SASL_APPNAME: u32 = 17;
pub const SASL_GSS_CREDS: u32 = 18;
pub const SASL_GSS_PEER_NAME: u32 = 19;
pub const SASL_GSS_LOCAL_NAME: u32 = 20;
pub const SASL_CHANNEL_BINDING: u32 = 21;
pub const SASL_HTTP_REQUEST: u32 = 22;
pub const SASL_SSF_EXTERNAL: u32 = 100;
pub const SASL_SEC_PROPS: u32 = 101;
pub const SASL_AUTH_EXTERNAL: u32 = 102;
pub const SASL_SET_CREATE: u32 = 1;
pub const SASL_SET_DISABLE: u32 = 2;
pub const SASL_SET_NOPLAIN: u32 = 4;
pub const SASL_SET_CURMECH_ONLY: u32 = 8;
pub const SASL_AUX_ALL: &[u8; 2] = b"*\0";
pub const SASL_AUX_PASSWORD_PROP: &[u8; 13] = b"userPassword\0";
pub const SASL_AUX_PASSWORD: &[u8; 14] = b"*userPassword\0";
pub const SASL_AUX_UIDNUM: &[u8; 10] = b"uidNumber\0";
pub const SASL_AUX_GIDNUM: &[u8; 10] = b"gidNumber\0";
pub const SASL_AUX_FULLNAME: &[u8; 6] = b"gecos\0";
pub const SASL_AUX_HOMEDIR: &[u8; 14] = b"homeDirectory\0";
pub const SASL_AUX_SHELL: &[u8; 11] = b"loginShell\0";
pub const SASL_AUX_MAILADDR: &[u8; 5] = b"mail\0";
pub const SASL_AUX_UNIXMBX: &[u8; 17] = b"mailMessageStore\0";
pub const SASL_AUX_MAILCHAN: &[u8; 22] = b"mailSMTPSubmitChannel\0";
pub type ber_int_t = ::std::os::raw::c_int;
pub type ber_sint_t = ::std::os::raw::c_int;
pub type ber_uint_t = ::std::os::raw::c_uint;
pub type ber_tag_t = ::std::os::raw::c_ulong;
pub type ber_socket_t = ::std::os::raw::c_int;
pub type ber_len_t = ::std::os::raw::c_ulong;
pub type ber_slen_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    _unused: [u8; 0],
}
pub type locale_t = *mut __locale_struct;
extern "C" {
    pub fn memcpy(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stpcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(arg1: *const ::std::os::raw::c_char, arg2: usize) -> usize;
}
extern "C" {
    pub fn strdup(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn memmem(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strsep(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn explicit_bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
pub type BER_ERRNO_FN = ::std::option::Option<
    unsafe extern "C" fn() -> *mut ::std::os::raw::c_int,
>;
pub type BER_LOG_PRINT_FN = ::std::option::Option<
    unsafe extern "C" fn(buf: *const ::std::os::raw::c_char),
>;
pub type BER_MEMALLOC_FN = ::std::option::Option<
    unsafe extern "C" fn(
        size: ber_len_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type BER_MEMCALLOC_FN = ::std::option::Option<
    unsafe extern "C" fn(
        n: ber_len_t,
        size: ber_len_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type BER_MEMREALLOC_FN = ::std::option::Option<
    unsafe extern "C" fn(
        p: *mut ::std::os::raw::c_void,
        size: ber_len_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type BER_MEMFREE_FN = ::std::option::Option<
    unsafe extern "C" fn(
        p: *mut ::std::os::raw::c_void,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lber_memory_fns {
    pub bmf_malloc: BER_MEMALLOC_FN,
    pub bmf_calloc: BER_MEMCALLOC_FN,
    pub bmf_realloc: BER_MEMREALLOC_FN,
    pub bmf_free: BER_MEMFREE_FN,
}
#[test]
fn bindgen_test_layout_lber_memory_fns() {
    const UNINIT: ::std::mem::MaybeUninit<lber_memory_fns> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lber_memory_fns>(),
        32usize,
        concat!("Size of: ", stringify!(lber_memory_fns)),
    );
    assert_eq!(
        ::std::mem::align_of::<lber_memory_fns>(),
        8usize,
        concat!("Alignment of ", stringify!(lber_memory_fns)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmf_malloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lber_memory_fns),
            "::",
            stringify!(bmf_malloc),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmf_calloc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lber_memory_fns),
            "::",
            stringify!(bmf_calloc),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmf_realloc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lber_memory_fns),
            "::",
            stringify!(bmf_realloc),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmf_free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lber_memory_fns),
            "::",
            stringify!(bmf_free),
        ),
    );
}
pub type BerMemoryFunctions = lber_memory_fns;
extern "C" {
    pub static mut ber_pvt_opt_on: ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct berelement {
    _unused: [u8; 0],
}
pub type BerElement = berelement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockbuf {
    _unused: [u8; 0],
}
pub type Sockbuf = sockbuf;
pub type Sockbuf_IO = sockbuf_io;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockbuf_io_desc {
    pub sbiod_level: ::std::os::raw::c_int,
    pub sbiod_sb: *mut Sockbuf,
    pub sbiod_io: *mut Sockbuf_IO,
    pub sbiod_pvt: *mut ::std::os::raw::c_void,
    pub sbiod_next: *mut sockbuf_io_desc,
}
#[test]
fn bindgen_test_layout_sockbuf_io_desc() {
    const UNINIT: ::std::mem::MaybeUninit<sockbuf_io_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockbuf_io_desc>(),
        40usize,
        concat!("Size of: ", stringify!(sockbuf_io_desc)),
    );
    assert_eq!(
        ::std::mem::align_of::<sockbuf_io_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(sockbuf_io_desc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbiod_level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockbuf_io_desc),
            "::",
            stringify!(sbiod_level),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbiod_sb) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockbuf_io_desc),
            "::",
            stringify!(sbiod_sb),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbiod_io) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sockbuf_io_desc),
            "::",
            stringify!(sbiod_io),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbiod_pvt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockbuf_io_desc),
            "::",
            stringify!(sbiod_pvt),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbiod_next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sockbuf_io_desc),
            "::",
            stringify!(sbiod_next),
        ),
    );
}
pub type Sockbuf_IO_Desc = sockbuf_io_desc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockbuf_io {
    pub sbi_setup: ::std::option::Option<
        unsafe extern "C" fn(
            sbiod: *mut Sockbuf_IO_Desc,
            arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub sbi_remove: ::std::option::Option<
        unsafe extern "C" fn(sbiod: *mut Sockbuf_IO_Desc) -> ::std::os::raw::c_int,
    >,
    pub sbi_ctrl: ::std::option::Option<
        unsafe extern "C" fn(
            sbiod: *mut Sockbuf_IO_Desc,
            opt: ::std::os::raw::c_int,
            arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub sbi_read: ::std::option::Option<
        unsafe extern "C" fn(
            sbiod: *mut Sockbuf_IO_Desc,
            buf: *mut ::std::os::raw::c_void,
            len: ber_len_t,
        ) -> ber_slen_t,
    >,
    pub sbi_write: ::std::option::Option<
        unsafe extern "C" fn(
            sbiod: *mut Sockbuf_IO_Desc,
            buf: *mut ::std::os::raw::c_void,
            len: ber_len_t,
        ) -> ber_slen_t,
    >,
    pub sbi_close: ::std::option::Option<
        unsafe extern "C" fn(sbiod: *mut Sockbuf_IO_Desc) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_sockbuf_io() {
    const UNINIT: ::std::mem::MaybeUninit<sockbuf_io> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockbuf_io>(),
        48usize,
        concat!("Size of: ", stringify!(sockbuf_io)),
    );
    assert_eq!(
        ::std::mem::align_of::<sockbuf_io>(),
        8usize,
        concat!("Alignment of ", stringify!(sockbuf_io)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbi_setup) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sockbuf_io), "::", stringify!(sbi_setup)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbi_remove) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockbuf_io),
            "::",
            stringify!(sbi_remove),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbi_ctrl) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(sockbuf_io), "::", stringify!(sbi_ctrl)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbi_read) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(sockbuf_io), "::", stringify!(sbi_read)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbi_write) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(sockbuf_io), "::", stringify!(sbi_write)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbi_close) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(sockbuf_io), "::", stringify!(sbi_close)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct berval {
    pub bv_len: ber_len_t,
    pub bv_val: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_berval() {
    const UNINIT: ::std::mem::MaybeUninit<berval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<berval>(),
        16usize,
        concat!("Size of: ", stringify!(berval)),
    );
    assert_eq!(
        ::std::mem::align_of::<berval>(),
        8usize,
        concat!("Alignment of ", stringify!(berval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_len) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(berval), "::", stringify!(bv_len)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bv_val) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(berval), "::", stringify!(bv_val)),
    );
}
pub type BerValue = berval;
pub type BerVarray = *mut BerValue;
extern "C" {
    pub fn ber_error_print(data: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ber_bprint(data: *const ::std::os::raw::c_char, len: ber_len_t);
}
extern "C" {
    pub fn ber_dump(ber: *mut BerElement, inout: ::std::os::raw::c_int);
}
pub type BERDecodeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ber: *mut BerElement,
        data: *mut ::std::os::raw::c_void,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ber_get_tag(ber: *mut BerElement) -> ber_tag_t;
}
extern "C" {
    pub fn ber_skip_tag(ber: *mut BerElement, len: *mut ber_len_t) -> ber_tag_t;
}
extern "C" {
    pub fn ber_peek_tag(ber: *mut BerElement, len: *mut ber_len_t) -> ber_tag_t;
}
extern "C" {
    pub fn ber_skip_raw(ber: *mut BerElement, bv: *mut berval) -> ber_tag_t;
}
extern "C" {
    pub fn ber_skip_element(ber: *mut BerElement, bv: *mut berval) -> ber_tag_t;
}
extern "C" {
    pub fn ber_peek_element(ber: *const BerElement, bv: *mut berval) -> ber_tag_t;
}
extern "C" {
    pub fn ber_get_int(ber: *mut BerElement, num: *mut ber_int_t) -> ber_tag_t;
}
extern "C" {
    pub fn ber_get_enum(ber: *mut BerElement, num: *mut ber_int_t) -> ber_tag_t;
}
extern "C" {
    pub fn ber_decode_int(
        bv: *const berval,
        num: *mut ber_int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_get_stringb(
        ber: *mut BerElement,
        buf: *mut ::std::os::raw::c_char,
        len: *mut ber_len_t,
    ) -> ber_tag_t;
}
extern "C" {
    pub fn ber_get_stringbv(
        ber: *mut BerElement,
        bv: *mut berval,
        options: ::std::os::raw::c_int,
    ) -> ber_tag_t;
}
extern "C" {
    pub fn ber_get_stringa(
        ber: *mut BerElement,
        buf: *mut *mut ::std::os::raw::c_char,
    ) -> ber_tag_t;
}
extern "C" {
    pub fn ber_get_stringal(ber: *mut BerElement, bv: *mut *mut berval) -> ber_tag_t;
}
extern "C" {
    pub fn ber_get_bitstringa(
        ber: *mut BerElement,
        buf: *mut *mut ::std::os::raw::c_char,
        len: *mut ber_len_t,
    ) -> ber_tag_t;
}
extern "C" {
    pub fn ber_get_null(ber: *mut BerElement) -> ber_tag_t;
}
extern "C" {
    pub fn ber_get_boolean(ber: *mut BerElement, boolval: *mut ber_int_t) -> ber_tag_t;
}
extern "C" {
    pub fn ber_first_element(
        ber: *mut BerElement,
        len: *mut ber_len_t,
        last: *mut *mut ::std::os::raw::c_char,
    ) -> ber_tag_t;
}
extern "C" {
    pub fn ber_next_element(
        ber: *mut BerElement,
        len: *mut ber_len_t,
        last: *const ::std::os::raw::c_char,
    ) -> ber_tag_t;
}
extern "C" {
    pub fn ber_scanf(
        ber: *mut BerElement,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ber_tag_t;
}
extern "C" {
    pub fn ber_decode_oid(in_: *mut berval, out: *mut berval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_encode_oid(in_: *mut berval, out: *mut berval) -> ::std::os::raw::c_int;
}
pub type BEREncodeCallback = ::std::option::Option<
    unsafe extern "C" fn(
        ber: *mut BerElement,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ber_put_enum(
        ber: *mut BerElement,
        num: ber_int_t,
        tag: ber_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_put_int(
        ber: *mut BerElement,
        num: ber_int_t,
        tag: ber_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_put_ostring(
        ber: *mut BerElement,
        str_: *const ::std::os::raw::c_char,
        len: ber_len_t,
        tag: ber_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_put_berval(
        ber: *mut BerElement,
        bv: *mut berval,
        tag: ber_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_put_string(
        ber: *mut BerElement,
        str_: *const ::std::os::raw::c_char,
        tag: ber_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_put_bitstring(
        ber: *mut BerElement,
        str_: *const ::std::os::raw::c_char,
        bitlen: ber_len_t,
        tag: ber_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_put_null(ber: *mut BerElement, tag: ber_tag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_put_boolean(
        ber: *mut BerElement,
        boolval: ber_int_t,
        tag: ber_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_start_seq(ber: *mut BerElement, tag: ber_tag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_start_set(ber: *mut BerElement, tag: ber_tag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_put_seq(ber: *mut BerElement) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_put_set(ber: *mut BerElement) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_printf(
        ber: *mut BerElement,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_skip_data(ber: *mut BerElement, len: ber_len_t) -> ber_slen_t;
}
extern "C" {
    pub fn ber_read(
        ber: *mut BerElement,
        buf: *mut ::std::os::raw::c_char,
        len: ber_len_t,
    ) -> ber_slen_t;
}
extern "C" {
    pub fn ber_write(
        ber: *mut BerElement,
        buf: *const ::std::os::raw::c_char,
        len: ber_len_t,
        zero: ::std::os::raw::c_int,
    ) -> ber_slen_t;
}
extern "C" {
    pub fn ber_free(ber: *mut BerElement, freebuf: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ber_free_buf(ber: *mut BerElement);
}
extern "C" {
    pub fn ber_flush2(
        sb: *mut Sockbuf,
        ber: *mut BerElement,
        freeit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_flush(
        sb: *mut Sockbuf,
        ber: *mut BerElement,
        freeit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_alloc() -> *mut BerElement;
}
extern "C" {
    pub fn der_alloc() -> *mut BerElement;
}
extern "C" {
    pub fn ber_alloc_t(beroptions: ::std::os::raw::c_int) -> *mut BerElement;
}
extern "C" {
    pub fn ber_dup(ber: *mut BerElement) -> *mut BerElement;
}
extern "C" {
    pub fn ber_get_next(
        sb: *mut Sockbuf,
        len: *mut ber_len_t,
        ber: *mut BerElement,
    ) -> ber_tag_t;
}
extern "C" {
    pub fn ber_init2(
        ber: *mut BerElement,
        bv: *mut berval,
        options: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ber_init_w_nullc(ber: *mut BerElement, options: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ber_reset(ber: *mut BerElement, was_writing: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ber_init(bv: *mut berval) -> *mut BerElement;
}
extern "C" {
    pub fn ber_flatten(
        ber: *mut BerElement,
        bvPtr: *mut *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_flatten2(
        ber: *mut BerElement,
        bv: *mut berval,
        alloc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_remaining(ber: *mut BerElement) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_get_option(
        item: *mut ::std::os::raw::c_void,
        option: ::std::os::raw::c_int,
        outvalue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_set_option(
        item: *mut ::std::os::raw::c_void,
        option: ::std::os::raw::c_int,
        invalue: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_sockbuf_alloc() -> *mut Sockbuf;
}
extern "C" {
    pub fn ber_sockbuf_free(sb: *mut Sockbuf);
}
extern "C" {
    pub fn ber_sockbuf_add_io(
        sb: *mut Sockbuf,
        sbio: *mut Sockbuf_IO,
        layer: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_sockbuf_remove_io(
        sb: *mut Sockbuf,
        sbio: *mut Sockbuf_IO,
        layer: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_sockbuf_ctrl(
        sb: *mut Sockbuf,
        opt: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut ber_sockbuf_io_tcp: Sockbuf_IO;
}
extern "C" {
    pub static mut ber_sockbuf_io_readahead: Sockbuf_IO;
}
extern "C" {
    pub static mut ber_sockbuf_io_fd: Sockbuf_IO;
}
extern "C" {
    pub static mut ber_sockbuf_io_debug: Sockbuf_IO;
}
extern "C" {
    pub static mut ber_sockbuf_io_udp: Sockbuf_IO;
}
extern "C" {
    pub fn ber_memalloc(s: ber_len_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ber_memrealloc(
        p: *mut ::std::os::raw::c_void,
        s: ber_len_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ber_memcalloc(n: ber_len_t, s: ber_len_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ber_memfree(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ber_memvfree(vector: *mut *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ber_bvfree(bv: *mut berval);
}
extern "C" {
    pub fn ber_bvecfree(bv: *mut *mut berval);
}
extern "C" {
    pub fn ber_bvecadd(
        bvec: *mut *mut *mut berval,
        bv: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_dupbv(dst: *mut berval, src: *mut berval) -> *mut berval;
}
extern "C" {
    pub fn ber_bvdup(src: *mut berval) -> *mut berval;
}
extern "C" {
    pub fn ber_mem2bv(
        arg1: *const ::std::os::raw::c_char,
        len: ber_len_t,
        duplicate: ::std::os::raw::c_int,
        bv: *mut berval,
    ) -> *mut berval;
}
extern "C" {
    pub fn ber_str2bv(
        arg1: *const ::std::os::raw::c_char,
        len: ber_len_t,
        duplicate: ::std::os::raw::c_int,
        bv: *mut berval,
    ) -> *mut berval;
}
extern "C" {
    pub fn ber_strdup(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ber_strnlen(s: *const ::std::os::raw::c_char, len: ber_len_t) -> ber_len_t;
}
extern "C" {
    pub fn ber_strndup(
        s: *const ::std::os::raw::c_char,
        l: ber_len_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ber_bvreplace(dst: *mut berval, src: *const berval) -> *mut berval;
}
extern "C" {
    pub fn ber_bvarray_free(p: BerVarray);
}
extern "C" {
    pub fn ber_bvarray_add(
        p: *mut BerVarray,
        bv: *mut BerValue,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ber_errno_addr() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldapapiinfo {
    pub ldapai_info_version: ::std::os::raw::c_int,
    pub ldapai_api_version: ::std::os::raw::c_int,
    pub ldapai_protocol_version: ::std::os::raw::c_int,
    pub ldapai_extensions: *mut *mut ::std::os::raw::c_char,
    pub ldapai_vendor_name: *mut ::std::os::raw::c_char,
    pub ldapai_vendor_version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ldapapiinfo() {
    const UNINIT: ::std::mem::MaybeUninit<ldapapiinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldapapiinfo>(),
        40usize,
        concat!("Size of: ", stringify!(ldapapiinfo)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldapapiinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ldapapiinfo)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ldapai_info_version) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapapiinfo),
            "::",
            stringify!(ldapai_info_version),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ldapai_api_version) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapapiinfo),
            "::",
            stringify!(ldapai_api_version),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ldapai_protocol_version) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapapiinfo),
            "::",
            stringify!(ldapai_protocol_version),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ldapai_extensions) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapapiinfo),
            "::",
            stringify!(ldapai_extensions),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ldapai_vendor_name) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapapiinfo),
            "::",
            stringify!(ldapai_vendor_name),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ldapai_vendor_version) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapapiinfo),
            "::",
            stringify!(ldapai_vendor_version),
        ),
    );
}
pub type LDAPAPIInfo = ldapapiinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldap_apifeature_info {
    pub ldapaif_info_version: ::std::os::raw::c_int,
    pub ldapaif_name: *mut ::std::os::raw::c_char,
    pub ldapaif_version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ldap_apifeature_info() {
    const UNINIT: ::std::mem::MaybeUninit<ldap_apifeature_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldap_apifeature_info>(),
        24usize,
        concat!("Size of: ", stringify!(ldap_apifeature_info)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldap_apifeature_info>(),
        8usize,
        concat!("Alignment of ", stringify!(ldap_apifeature_info)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ldapaif_info_version) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_apifeature_info),
            "::",
            stringify!(ldapaif_info_version),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldapaif_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_apifeature_info),
            "::",
            stringify!(ldapaif_name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldapaif_version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_apifeature_info),
            "::",
            stringify!(ldapaif_version),
        ),
    );
}
pub type LDAPAPIFeatureInfo = ldap_apifeature_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldapcontrol {
    pub ldctl_oid: *mut ::std::os::raw::c_char,
    pub ldctl_value: berval,
    pub ldctl_iscritical: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ldapcontrol() {
    const UNINIT: ::std::mem::MaybeUninit<ldapcontrol> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldapcontrol>(),
        32usize,
        concat!("Size of: ", stringify!(ldapcontrol)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldapcontrol>(),
        8usize,
        concat!("Alignment of ", stringify!(ldapcontrol)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldctl_oid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapcontrol),
            "::",
            stringify!(ldctl_oid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldctl_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapcontrol),
            "::",
            stringify!(ldctl_value),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldctl_iscritical) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapcontrol),
            "::",
            stringify!(ldctl_iscritical),
        ),
    );
}
pub type LDAPControl = ldapcontrol;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldapmsg {
    _unused: [u8; 0],
}
pub type LDAPMessage = ldapmsg;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ldapmod {
    pub mod_op: ::std::os::raw::c_int,
    pub mod_type: *mut ::std::os::raw::c_char,
    pub mod_vals: ldapmod_mod_vals_u,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ldapmod_mod_vals_u {
    pub modv_strvals: *mut *mut ::std::os::raw::c_char,
    pub modv_bvals: *mut *mut berval,
}
#[test]
fn bindgen_test_layout_ldapmod_mod_vals_u() {
    const UNINIT: ::std::mem::MaybeUninit<ldapmod_mod_vals_u> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldapmod_mod_vals_u>(),
        8usize,
        concat!("Size of: ", stringify!(ldapmod_mod_vals_u)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldapmod_mod_vals_u>(),
        8usize,
        concat!("Alignment of ", stringify!(ldapmod_mod_vals_u)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modv_strvals) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapmod_mod_vals_u),
            "::",
            stringify!(modv_strvals),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modv_bvals) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapmod_mod_vals_u),
            "::",
            stringify!(modv_bvals),
        ),
    );
}
#[test]
fn bindgen_test_layout_ldapmod() {
    const UNINIT: ::std::mem::MaybeUninit<ldapmod> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldapmod>(),
        24usize,
        concat!("Size of: ", stringify!(ldapmod)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldapmod>(),
        8usize,
        concat!("Alignment of ", stringify!(ldapmod)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_op) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ldapmod), "::", stringify!(mod_op)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_type) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ldapmod), "::", stringify!(mod_type)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_vals) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ldapmod), "::", stringify!(mod_vals)),
    );
}
pub type LDAPMod = ldapmod;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldap {
    _unused: [u8; 0],
}
pub type LDAP = ldap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldap_url_desc {
    pub lud_next: *mut ldap_url_desc,
    pub lud_scheme: *mut ::std::os::raw::c_char,
    pub lud_host: *mut ::std::os::raw::c_char,
    pub lud_port: ::std::os::raw::c_int,
    pub lud_dn: *mut ::std::os::raw::c_char,
    pub lud_attrs: *mut *mut ::std::os::raw::c_char,
    pub lud_scope: ::std::os::raw::c_int,
    pub lud_filter: *mut ::std::os::raw::c_char,
    pub lud_exts: *mut *mut ::std::os::raw::c_char,
    pub lud_crit_exts: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ldap_url_desc() {
    const UNINIT: ::std::mem::MaybeUninit<ldap_url_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldap_url_desc>(),
        80usize,
        concat!("Size of: ", stringify!(ldap_url_desc)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldap_url_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(ldap_url_desc)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lud_next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_url_desc),
            "::",
            stringify!(lud_next),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lud_scheme) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_url_desc),
            "::",
            stringify!(lud_scheme),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lud_host) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_url_desc),
            "::",
            stringify!(lud_host),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lud_port) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_url_desc),
            "::",
            stringify!(lud_port),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lud_dn) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ldap_url_desc), "::", stringify!(lud_dn)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lud_attrs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_url_desc),
            "::",
            stringify!(lud_attrs),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lud_scope) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_url_desc),
            "::",
            stringify!(lud_scope),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lud_filter) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_url_desc),
            "::",
            stringify!(lud_filter),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lud_exts) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_url_desc),
            "::",
            stringify!(lud_exts),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lud_crit_exts) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_url_desc),
            "::",
            stringify!(lud_crit_exts),
        ),
    );
}
pub type LDAPURLDesc = ldap_url_desc;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_NONE: ldap_sync_refresh_t = -1;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_PHASE_FLAG: ldap_sync_refresh_t = 16;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_IDSET_FLAG: ldap_sync_refresh_t = 32;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_DONE_FLAG: ldap_sync_refresh_t = 64;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_PRESENT: ldap_sync_refresh_t = 0;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_ADD: ldap_sync_refresh_t = 1;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_MODIFY: ldap_sync_refresh_t = 2;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_DELETE: ldap_sync_refresh_t = 3;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_PRESENTS: ldap_sync_refresh_t = 16;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_DELETES: ldap_sync_refresh_t = 19;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_PRESENTS_IDSET: ldap_sync_refresh_t = 48;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_DELETES_IDSET: ldap_sync_refresh_t = 51;
pub const ldap_sync_refresh_t_LDAP_SYNC_CAPI_DONE: ldap_sync_refresh_t = 80;
pub type ldap_sync_refresh_t = ::std::os::raw::c_int;
pub type ldap_sync_search_entry_f = ::std::option::Option<
    unsafe extern "C" fn(
        ls: *mut ldap_sync_t,
        msg: *mut LDAPMessage,
        entryUUID: *mut berval,
        phase: ldap_sync_refresh_t,
    ) -> ::std::os::raw::c_int,
>;
pub type ldap_sync_search_reference_f = ::std::option::Option<
    unsafe extern "C" fn(
        ls: *mut ldap_sync_t,
        msg: *mut LDAPMessage,
    ) -> ::std::os::raw::c_int,
>;
pub type ldap_sync_intermediate_f = ::std::option::Option<
    unsafe extern "C" fn(
        ls: *mut ldap_sync_t,
        msg: *mut LDAPMessage,
        syncUUIDs: BerVarray,
        phase: ldap_sync_refresh_t,
    ) -> ::std::os::raw::c_int,
>;
pub type ldap_sync_search_result_f = ::std::option::Option<
    unsafe extern "C" fn(
        ls: *mut ldap_sync_t,
        msg: *mut LDAPMessage,
        refreshDeletes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldap_sync_t {
    pub ls_base: *mut ::std::os::raw::c_char,
    pub ls_scope: ::std::os::raw::c_int,
    pub ls_filter: *mut ::std::os::raw::c_char,
    pub ls_attrs: *mut *mut ::std::os::raw::c_char,
    pub ls_timelimit: ::std::os::raw::c_int,
    pub ls_sizelimit: ::std::os::raw::c_int,
    pub ls_timeout: ::std::os::raw::c_int,
    pub ls_search_entry: ldap_sync_search_entry_f,
    pub ls_search_reference: ldap_sync_search_reference_f,
    pub ls_intermediate: ldap_sync_intermediate_f,
    pub ls_search_result: ldap_sync_search_result_f,
    pub ls_private: *mut ::std::os::raw::c_void,
    pub ls_ld: *mut LDAP,
    pub ls_msgid: ::std::os::raw::c_int,
    pub ls_reloadHint: ::std::os::raw::c_int,
    pub ls_cookie: berval,
    pub ls_refreshPhase: ldap_sync_refresh_t,
}
#[test]
fn bindgen_test_layout_ldap_sync_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldap_sync_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldap_sync_t>(),
        128usize,
        concat!("Size of: ", stringify!(ldap_sync_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldap_sync_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldap_sync_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_base) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ldap_sync_t), "::", stringify!(ls_base)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_scope) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ldap_sync_t), "::", stringify!(ls_scope)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_filter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_filter),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_attrs) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(ldap_sync_t), "::", stringify!(ls_attrs)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_timelimit) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_timelimit),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_sizelimit) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_sizelimit),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_timeout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_timeout),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_search_entry) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_search_entry),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ls_search_reference) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_search_reference),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_intermediate) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_intermediate),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_search_result) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_search_result),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_private) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_private),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_ld) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(ldap_sync_t), "::", stringify!(ls_ld)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_msgid) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(ldap_sync_t), "::", stringify!(ls_msgid)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_reloadHint) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_reloadHint),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_cookie) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_cookie),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ls_refreshPhase) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ldap_sync_t),
            "::",
            stringify!(ls_refreshPhase),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    _unused: [u8; 0],
}
pub type ldap_conn_add_f = ::std::option::Option<
    unsafe extern "C" fn(
        ld: *mut LDAP,
        sb: *mut Sockbuf,
        srv: *mut LDAPURLDesc,
        addr: *mut sockaddr,
        ctx: *mut ldap_conncb,
    ) -> ::std::os::raw::c_int,
>;
pub type ldap_conn_del_f = ::std::option::Option<
    unsafe extern "C" fn(ld: *mut LDAP, sb: *mut Sockbuf, ctx: *mut ldap_conncb),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldap_conncb {
    pub lc_add: ldap_conn_add_f,
    pub lc_del: ldap_conn_del_f,
    pub lc_arg: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ldap_conncb() {
    const UNINIT: ::std::mem::MaybeUninit<ldap_conncb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldap_conncb>(),
        24usize,
        concat!("Size of: ", stringify!(ldap_conncb)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldap_conncb>(),
        8usize,
        concat!("Alignment of ", stringify!(ldap_conncb)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_add) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ldap_conncb), "::", stringify!(lc_add)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_del) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ldap_conncb), "::", stringify!(lc_del)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lc_arg) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ldap_conncb), "::", stringify!(lc_arg)),
    );
}
extern "C" {
    pub fn ldap_get_option(
        ld: *mut LDAP,
        option: ::std::os::raw::c_int,
        outvalue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_set_option(
        ld: *mut LDAP,
        option: ::std::os::raw::c_int,
        invalue: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type LDAP_REBIND_PROC = ::std::option::Option<
    unsafe extern "C" fn(
        ld: *mut LDAP,
        url: *const ::std::os::raw::c_char,
        request: ber_tag_t,
        msgid: ber_int_t,
        params: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ldap_set_rebind_proc(
        ld: *mut LDAP,
        rebind_proc: LDAP_REBIND_PROC,
        params: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type LDAP_NEXTREF_PROC = ::std::option::Option<
    unsafe extern "C" fn(
        ld: *mut LDAP,
        refsp: *mut *mut *mut ::std::os::raw::c_char,
        cntp: *mut ::std::os::raw::c_int,
        params: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ldap_set_nextref_proc(
        ld: *mut LDAP,
        nextref_proc: LDAP_NEXTREF_PROC,
        params: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type LDAP_URLLIST_PROC = ::std::option::Option<
    unsafe extern "C" fn(
        ld: *mut LDAP,
        urllist: *mut *mut LDAPURLDesc,
        url: *mut *mut LDAPURLDesc,
        params: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ldap_set_urllist_proc(
        ld: *mut LDAP,
        urllist_proc: LDAP_URLLIST_PROC,
        params: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_control_create(
        requestOID: *const ::std::os::raw::c_char,
        iscritical: ::std::os::raw::c_int,
        value: *mut berval,
        dupval: ::std::os::raw::c_int,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_control_find(
        oid: *const ::std::os::raw::c_char,
        ctrls: *mut *mut LDAPControl,
        nextctrlp: *mut *mut *mut LDAPControl,
    ) -> *mut LDAPControl;
}
extern "C" {
    pub fn ldap_control_free(ctrl: *mut LDAPControl);
}
extern "C" {
    pub fn ldap_controls_free(ctrls: *mut *mut LDAPControl);
}
extern "C" {
    pub fn ldap_controls_dup(controls: *const *mut LDAPControl) -> *mut *mut LDAPControl;
}
extern "C" {
    pub fn ldap_control_dup(c: *const LDAPControl) -> *mut LDAPControl;
}
extern "C" {
    pub fn ldap_domain2dn(
        domain: *const ::std::os::raw::c_char,
        dn: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_dn2domain(
        dn: *const ::std::os::raw::c_char,
        domain: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_domain2hostlist(
        domain: *const ::std::os::raw::c_char,
        hostlist: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_extended_operation(
        ld: *mut LDAP,
        reqoid: *const ::std::os::raw::c_char,
        reqdata: *mut berval,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_extended_operation_s(
        ld: *mut LDAP,
        reqoid: *const ::std::os::raw::c_char,
        reqdata: *mut berval,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        retoidp: *mut *mut ::std::os::raw::c_char,
        retdatap: *mut *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_extended_result(
        ld: *mut LDAP,
        res: *mut LDAPMessage,
        retoidp: *mut *mut ::std::os::raw::c_char,
        retdatap: *mut *mut berval,
        freeit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_intermediate(
        ld: *mut LDAP,
        res: *mut LDAPMessage,
        retoidp: *mut *mut ::std::os::raw::c_char,
        retdatap: *mut *mut berval,
        serverctrls: *mut *mut *mut LDAPControl,
        freeit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_abandon_ext(
        ld: *mut LDAP,
        msgid: ::std::os::raw::c_int,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_add_ext(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        attrs: *mut *mut LDAPMod,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_add_ext_s(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        attrs: *mut *mut LDAPMod,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_sasl_bind(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        mechanism: *const ::std::os::raw::c_char,
        cred: *mut berval,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type LDAP_SASL_INTERACT_PROC = ::std::option::Option<
    unsafe extern "C" fn(
        ld: *mut LDAP,
        flags: ::std::os::raw::c_uint,
        defaults: *mut ::std::os::raw::c_void,
        interact: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ldap_sasl_interactive_bind(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        saslMechanism: *const ::std::os::raw::c_char,
        serverControls: *mut *mut LDAPControl,
        clientControls: *mut *mut LDAPControl,
        flags: ::std::os::raw::c_uint,
        proc_: LDAP_SASL_INTERACT_PROC,
        defaults: *mut ::std::os::raw::c_void,
        result: *mut LDAPMessage,
        rmech: *mut *const ::std::os::raw::c_char,
        msgid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_sasl_interactive_bind_s(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        saslMechanism: *const ::std::os::raw::c_char,
        serverControls: *mut *mut LDAPControl,
        clientControls: *mut *mut LDAPControl,
        flags: ::std::os::raw::c_uint,
        proc_: LDAP_SASL_INTERACT_PROC,
        defaults: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_sasl_bind_s(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        mechanism: *const ::std::os::raw::c_char,
        cred: *mut berval,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        servercredp: *mut *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_sasl_bind_result(
        ld: *mut LDAP,
        res: *mut LDAPMessage,
        servercredp: *mut *mut berval,
        freeit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_compare_ext(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        attr: *const ::std::os::raw::c_char,
        bvalue: *mut berval,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_compare_ext_s(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        attr: *const ::std::os::raw::c_char,
        bvalue: *mut berval,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_delete_ext(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_delete_ext_s(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_result(
        ld: *mut LDAP,
        res: *mut LDAPMessage,
        errcodep: *mut ::std::os::raw::c_int,
        matcheddnp: *mut *mut ::std::os::raw::c_char,
        diagmsgp: *mut *mut ::std::os::raw::c_char,
        referralsp: *mut *mut *mut ::std::os::raw::c_char,
        serverctrls: *mut *mut *mut LDAPControl,
        freeit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_err2string(err: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_modify_ext(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        mods: *mut *mut LDAPMod,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_modify_ext_s(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        mods: *mut *mut LDAPMod,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_rename(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        newrdn: *const ::std::os::raw::c_char,
        newSuperior: *const ::std::os::raw::c_char,
        deleteoldrdn: ::std::os::raw::c_int,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_rename_s(
        ld: *mut LDAP,
        dn: *const ::std::os::raw::c_char,
        newrdn: *const ::std::os::raw::c_char,
        newSuperior: *const ::std::os::raw::c_char,
        deleteoldrdn: ::std::os::raw::c_int,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create(ldp: *mut *mut LDAP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_initialize(
        ldp: *mut *mut LDAP,
        url: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_dup(old: *mut LDAP) -> *mut LDAP;
}
extern "C" {
    pub fn ldap_connect(ld: *mut LDAP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_tls_inplace(ld: *mut LDAP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_start_tls(
        ld: *mut LDAP,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_install_tls(ld: *mut LDAP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_start_tls_s(
        ld: *mut LDAP,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_first_message(
        ld: *mut LDAP,
        chain: *mut LDAPMessage,
    ) -> *mut LDAPMessage;
}
extern "C" {
    pub fn ldap_next_message(ld: *mut LDAP, msg: *mut LDAPMessage) -> *mut LDAPMessage;
}
extern "C" {
    pub fn ldap_count_messages(
        ld: *mut LDAP,
        chain: *mut LDAPMessage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_first_reference(
        ld: *mut LDAP,
        chain: *mut LDAPMessage,
    ) -> *mut LDAPMessage;
}
extern "C" {
    pub fn ldap_next_reference(
        ld: *mut LDAP,
        ref_: *mut LDAPMessage,
    ) -> *mut LDAPMessage;
}
extern "C" {
    pub fn ldap_count_references(
        ld: *mut LDAP,
        chain: *mut LDAPMessage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_reference(
        ld: *mut LDAP,
        ref_: *mut LDAPMessage,
        referralsp: *mut *mut *mut ::std::os::raw::c_char,
        serverctrls: *mut *mut *mut LDAPControl,
        freeit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_first_entry(ld: *mut LDAP, chain: *mut LDAPMessage) -> *mut LDAPMessage;
}
extern "C" {
    pub fn ldap_next_entry(ld: *mut LDAP, entry: *mut LDAPMessage) -> *mut LDAPMessage;
}
extern "C" {
    pub fn ldap_count_entries(
        ld: *mut LDAP,
        chain: *mut LDAPMessage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_get_entry_controls(
        ld: *mut LDAP,
        entry: *mut LDAPMessage,
        serverctrls: *mut *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_delete_result_entry(
        list: *mut *mut LDAPMessage,
        e: *mut LDAPMessage,
    ) -> *mut LDAPMessage;
}
extern "C" {
    pub fn ldap_add_result_entry(list: *mut *mut LDAPMessage, e: *mut LDAPMessage);
}
extern "C" {
    pub fn ldap_get_dn(
        ld: *mut LDAP,
        entry: *mut LDAPMessage,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldap_ava {
    pub la_attr: berval,
    pub la_value: berval,
    pub la_flags: ::std::os::raw::c_uint,
    pub la_private: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ldap_ava() {
    const UNINIT: ::std::mem::MaybeUninit<ldap_ava> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldap_ava>(),
        48usize,
        concat!("Size of: ", stringify!(ldap_ava)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldap_ava>(),
        8usize,
        concat!("Alignment of ", stringify!(ldap_ava)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).la_attr) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ldap_ava), "::", stringify!(la_attr)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).la_value) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ldap_ava), "::", stringify!(la_value)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).la_flags) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ldap_ava), "::", stringify!(la_flags)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).la_private) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(ldap_ava), "::", stringify!(la_private)),
    );
}
pub type LDAPAVA = ldap_ava;
pub type LDAPRDN = *mut *mut LDAPAVA;
pub type LDAPDN = *mut LDAPRDN;
extern "C" {
    pub fn ldap_rdnfree(rdn: LDAPRDN);
}
extern "C" {
    pub fn ldap_dnfree(dn: LDAPDN);
}
extern "C" {
    pub fn ldap_bv2dn(
        bv: *mut berval,
        dn: *mut LDAPDN,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_str2dn(
        str_: *const ::std::os::raw::c_char,
        dn: *mut LDAPDN,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_dn2bv(
        dn: LDAPDN,
        bv: *mut berval,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_dn2str(
        dn: LDAPDN,
        str_: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_bv2rdn(
        bv: *mut berval,
        rdn: *mut LDAPRDN,
        next: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_str2rdn(
        str_: *const ::std::os::raw::c_char,
        rdn: *mut LDAPRDN,
        next: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_rdn2bv(
        rdn: LDAPRDN,
        bv: *mut berval,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_rdn2str(
        rdn: LDAPRDN,
        str_: *mut *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_dn_normalize(
        in_: *const ::std::os::raw::c_char,
        iflags: ::std::os::raw::c_uint,
        out: *mut *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_dn2ufn(dn: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_explode_dn(
        dn: *const ::std::os::raw::c_char,
        notypes: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_explode_rdn(
        rdn: *const ::std::os::raw::c_char,
        notypes: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
pub type LDAPDN_rewrite_func = ::std::option::Option<
    unsafe extern "C" fn(
        dn: LDAPDN,
        flags: ::std::os::raw::c_uint,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ldap_X509dn2bv(
        x509_name: *mut ::std::os::raw::c_void,
        dn: *mut berval,
        func: LDAPDN_rewrite_func,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_dn2dcedn(
        dn: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_dcedn2dn(
        dce: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_dn2ad_canonical(
        dn: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_get_dn_ber(
        ld: *mut LDAP,
        e: *mut LDAPMessage,
        berout: *mut *mut BerElement,
        dn: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_get_attribute_ber(
        ld: *mut LDAP,
        e: *mut LDAPMessage,
        ber: *mut BerElement,
        attr: *mut berval,
        vals: *mut *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_first_attribute(
        ld: *mut LDAP,
        entry: *mut LDAPMessage,
        ber: *mut *mut BerElement,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_next_attribute(
        ld: *mut LDAP,
        entry: *mut LDAPMessage,
        ber: *mut BerElement,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_get_values_len(
        ld: *mut LDAP,
        entry: *mut LDAPMessage,
        target: *const ::std::os::raw::c_char,
    ) -> *mut *mut berval;
}
extern "C" {
    pub fn ldap_count_values_len(vals: *mut *mut berval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_value_free_len(vals: *mut *mut berval);
}
extern "C" {
    pub fn ldap_result(
        ld: *mut LDAP,
        msgid: ::std::os::raw::c_int,
        all: ::std::os::raw::c_int,
        timeout: *mut timeval,
        result: *mut *mut LDAPMessage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_msgtype(lm: *mut LDAPMessage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_msgid(lm: *mut LDAPMessage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_msgfree(lm: *mut LDAPMessage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_msgdelete(
        ld: *mut LDAP,
        msgid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_bv2escaped_filter_value(
        in_: *mut berval,
        out: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_search_ext(
        ld: *mut LDAP,
        base: *const ::std::os::raw::c_char,
        scope: ::std::os::raw::c_int,
        filter: *const ::std::os::raw::c_char,
        attrs: *mut *mut ::std::os::raw::c_char,
        attrsonly: ::std::os::raw::c_int,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        timeout: *mut timeval,
        sizelimit: ::std::os::raw::c_int,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_search_ext_s(
        ld: *mut LDAP,
        base: *const ::std::os::raw::c_char,
        scope: ::std::os::raw::c_int,
        filter: *const ::std::os::raw::c_char,
        attrs: *mut *mut ::std::os::raw::c_char,
        attrsonly: ::std::os::raw::c_int,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        timeout: *mut timeval,
        sizelimit: ::std::os::raw::c_int,
        res: *mut *mut LDAPMessage,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_unbind_ext(
        ld: *mut LDAP,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_unbind_ext_s(
        ld: *mut LDAP,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_destroy(ld: *mut LDAP) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_put_vrFilter(
        ber: *mut BerElement,
        vrf: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_memalloc(s: ber_len_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ldap_memrealloc(
        p: *mut ::std::os::raw::c_void,
        s: ber_len_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ldap_memcalloc(n: ber_len_t, s: ber_len_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ldap_memfree(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ldap_memvfree(v: *mut *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ldap_strdup(
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_mods_free(mods: *mut *mut LDAPMod, freemods: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ldap_is_ldap_url(url: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_is_ldaps_url(
        url: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_is_ldapi_url(
        url: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_url_parse(
        url: *const ::std::os::raw::c_char,
        ludpp: *mut *mut LDAPURLDesc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_url_desc2str(ludp: *mut LDAPURLDesc) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_free_urldesc(ludp: *mut LDAPURLDesc);
}
extern "C" {
    pub fn ldap_cancel(
        ld: *mut LDAP,
        cancelid: ::std::os::raw::c_int,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_cancel_s(
        ld: *mut LDAP,
        cancelid: ::std::os::raw::c_int,
        sctrl: *mut *mut LDAPControl,
        cctrl: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_turn(
        ld: *mut LDAP,
        mutual: ::std::os::raw::c_int,
        identifier: *const ::std::os::raw::c_char,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_turn_s(
        ld: *mut LDAP,
        mutual: ::std::os::raw::c_int,
        identifier: *const ::std::os::raw::c_char,
        sctrl: *mut *mut LDAPControl,
        cctrl: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_page_control_value(
        ld: *mut LDAP,
        pagesize: ber_int_t,
        cookie: *mut berval,
        value: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_page_control(
        ld: *mut LDAP,
        pagesize: ber_int_t,
        cookie: *mut berval,
        iscritical: ::std::os::raw::c_int,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_pageresponse_control(
        ld: *mut LDAP,
        ctrl: *mut LDAPControl,
        count: *mut ber_int_t,
        cookie: *mut berval,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldapsortkey {
    pub attributeType: *mut ::std::os::raw::c_char,
    pub orderingRule: *mut ::std::os::raw::c_char,
    pub reverseOrder: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ldapsortkey() {
    const UNINIT: ::std::mem::MaybeUninit<ldapsortkey> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldapsortkey>(),
        24usize,
        concat!("Size of: ", stringify!(ldapsortkey)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldapsortkey>(),
        8usize,
        concat!("Alignment of ", stringify!(ldapsortkey)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributeType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapsortkey),
            "::",
            stringify!(attributeType),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orderingRule) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapsortkey),
            "::",
            stringify!(orderingRule),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reverseOrder) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapsortkey),
            "::",
            stringify!(reverseOrder),
        ),
    );
}
pub type LDAPSortKey = ldapsortkey;
extern "C" {
    pub fn ldap_create_sort_keylist(
        sortKeyList: *mut *mut *mut LDAPSortKey,
        keyString: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_free_sort_keylist(sortkeylist: *mut *mut LDAPSortKey);
}
extern "C" {
    pub fn ldap_create_sort_control_value(
        ld: *mut LDAP,
        keyList: *mut *mut LDAPSortKey,
        value: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_sort_control(
        ld: *mut LDAP,
        keyList: *mut *mut LDAPSortKey,
        iscritical: ::std::os::raw::c_int,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_sortresponse_control(
        ld: *mut LDAP,
        ctrl: *mut LDAPControl,
        result: *mut ber_int_t,
        attribute: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldapvlvinfo {
    pub ldvlv_version: ber_int_t,
    pub ldvlv_before_count: ber_int_t,
    pub ldvlv_after_count: ber_int_t,
    pub ldvlv_offset: ber_int_t,
    pub ldvlv_count: ber_int_t,
    pub ldvlv_attrvalue: *mut berval,
    pub ldvlv_context: *mut berval,
    pub ldvlv_extradata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ldapvlvinfo() {
    const UNINIT: ::std::mem::MaybeUninit<ldapvlvinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldapvlvinfo>(),
        48usize,
        concat!("Size of: ", stringify!(ldapvlvinfo)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldapvlvinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ldapvlvinfo)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldvlv_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapvlvinfo),
            "::",
            stringify!(ldvlv_version),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ldvlv_before_count) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapvlvinfo),
            "::",
            stringify!(ldvlv_before_count),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ldvlv_after_count) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapvlvinfo),
            "::",
            stringify!(ldvlv_after_count),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldvlv_offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapvlvinfo),
            "::",
            stringify!(ldvlv_offset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldvlv_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapvlvinfo),
            "::",
            stringify!(ldvlv_count),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldvlv_attrvalue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapvlvinfo),
            "::",
            stringify!(ldvlv_attrvalue),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldvlv_context) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapvlvinfo),
            "::",
            stringify!(ldvlv_context),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldvlv_extradata) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ldapvlvinfo),
            "::",
            stringify!(ldvlv_extradata),
        ),
    );
}
pub type LDAPVLVInfo = ldapvlvinfo;
extern "C" {
    pub fn ldap_create_vlv_control_value(
        ld: *mut LDAP,
        ldvlistp: *mut LDAPVLVInfo,
        value: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_vlv_control(
        ld: *mut LDAP,
        ldvlistp: *mut LDAPVLVInfo,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_vlvresponse_control(
        ld: *mut LDAP,
        ctrls: *mut LDAPControl,
        target_posp: *mut ber_int_t,
        list_countp: *mut ber_int_t,
        contextp: *mut *mut berval,
        errcodep: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_verify_credentials(
        ld: *mut LDAP,
        cookie: *mut berval,
        dn: *const ::std::os::raw::c_char,
        mechanism: *const ::std::os::raw::c_char,
        cred: *mut berval,
        ctrls: *mut *mut LDAPControl,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_verify_credentials_s(
        ld: *mut LDAP,
        cookie: *mut berval,
        dn: *const ::std::os::raw::c_char,
        mechanism: *const ::std::os::raw::c_char,
        cred: *mut berval,
        vcictrls: *mut *mut LDAPControl,
        serverctrls: *mut *mut LDAPControl,
        clientctrls: *mut *mut LDAPControl,
        code: *mut ::std::os::raw::c_int,
        diagmsgp: *mut *mut ::std::os::raw::c_char,
        scookie: *mut *mut berval,
        servercredp: *mut *mut berval,
        vcoctrls: *mut *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_verify_credentials(
        ld: *mut LDAP,
        res: *mut LDAPMessage,
        code: *mut ::std::os::raw::c_int,
        diagmsgp: *mut *mut ::std::os::raw::c_char,
        cookie: *mut *mut berval,
        servercredp: *mut *mut berval,
        vcctrls: *mut *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_whoami(
        ld: *mut LDAP,
        res: *mut LDAPMessage,
        authzid: *mut *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_whoami(
        ld: *mut LDAP,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_whoami_s(
        ld: *mut LDAP,
        authzid: *mut *mut berval,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_passwd(
        ld: *mut LDAP,
        res: *mut LDAPMessage,
        newpasswd: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_passwd(
        ld: *mut LDAP,
        user: *mut berval,
        oldpw: *mut berval,
        newpw: *mut berval,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_passwd_s(
        ld: *mut LDAP,
        user: *mut berval,
        oldpw: *mut berval,
        newpw: *mut berval,
        newpasswd: *mut berval,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
pub const passpolicyerror_enum_PP_passwordExpired: passpolicyerror_enum = 0;
pub const passpolicyerror_enum_PP_accountLocked: passpolicyerror_enum = 1;
pub const passpolicyerror_enum_PP_changeAfterReset: passpolicyerror_enum = 2;
pub const passpolicyerror_enum_PP_passwordModNotAllowed: passpolicyerror_enum = 3;
pub const passpolicyerror_enum_PP_mustSupplyOldPassword: passpolicyerror_enum = 4;
pub const passpolicyerror_enum_PP_insufficientPasswordQuality: passpolicyerror_enum = 5;
pub const passpolicyerror_enum_PP_passwordTooShort: passpolicyerror_enum = 6;
pub const passpolicyerror_enum_PP_passwordTooYoung: passpolicyerror_enum = 7;
pub const passpolicyerror_enum_PP_passwordInHistory: passpolicyerror_enum = 8;
pub const passpolicyerror_enum_PP_passwordTooLong: passpolicyerror_enum = 9;
pub const passpolicyerror_enum_PP_noError: passpolicyerror_enum = 65535;
pub type passpolicyerror_enum = ::std::os::raw::c_uint;
pub use self::passpolicyerror_enum as LDAPPasswordPolicyError;
extern "C" {
    pub fn ldap_create_passwordpolicy_control(
        ld: *mut LDAP,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_passwordpolicy_control(
        ld: *mut LDAP,
        ctrl: *mut LDAPControl,
        expirep: *mut ber_int_t,
        gracep: *mut ber_int_t,
        errorp: *mut LDAPPasswordPolicyError,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_passwordpolicy_err2txt(
        arg1: LDAPPasswordPolicyError,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldap_parse_password_expiring_control(
        ld: *mut LDAP,
        ctrl: *mut LDAPControl,
        secondsp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_refresh(
        ld: *mut LDAP,
        res: *mut LDAPMessage,
        newttl: *mut ber_int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_refresh(
        ld: *mut LDAP,
        dn: *mut berval,
        ttl: ber_int_t,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_refresh_s(
        ld: *mut LDAP,
        dn: *mut berval,
        ttl: ber_int_t,
        newttl: *mut ber_int_t,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_txn_start(
        ld: *mut LDAP,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_txn_start_s(
        ld: *mut LDAP,
        sctrl: *mut *mut LDAPControl,
        cctrl: *mut *mut LDAPControl,
        rettxnid: *mut *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_txn_end(
        ld: *mut LDAP,
        commit: ::std::os::raw::c_int,
        txnid: *mut berval,
        sctrls: *mut *mut LDAPControl,
        cctrls: *mut *mut LDAPControl,
        msgidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_txn_end_s(
        ld: *mut LDAP,
        commit: ::std::os::raw::c_int,
        txnid: *mut berval,
        sctrl: *mut *mut LDAPControl,
        cctrl: *mut *mut LDAPControl,
        retidp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_sync_initialize(ls: *mut ldap_sync_t) -> *mut ldap_sync_t;
}
extern "C" {
    pub fn ldap_sync_destroy(ls: *mut ldap_sync_t, freeit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ldap_sync_init(
        ls: *mut ldap_sync_t,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_sync_init_refresh_only(ls: *mut ldap_sync_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_sync_init_refresh_and_persist(
        ls: *mut ldap_sync_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_sync_poll(ls: *mut ldap_sync_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_session_tracking_value(
        ld: *mut LDAP,
        sessionSourceIp: *mut ::std::os::raw::c_char,
        sessionSourceName: *mut ::std::os::raw::c_char,
        formatOID: *mut ::std::os::raw::c_char,
        sessionTrackingIdentifier: *mut berval,
        value: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_session_tracking_control(
        ld: *mut LDAP,
        sessionSourceIp: *mut ::std::os::raw::c_char,
        sessionSourceName: *mut ::std::os::raw::c_char,
        formatOID: *mut ::std::os::raw::c_char,
        sessionTrackingIdentifier: *mut berval,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_session_tracking_control(
        ld: *mut LDAP,
        ctrl: *mut LDAPControl,
        ip: *mut berval,
        name: *mut berval,
        oid: *mut berval,
        id: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_dirsync_value(
        ld: *mut LDAP,
        flags: ::std::os::raw::c_int,
        maxAttrCount: ::std::os::raw::c_int,
        cookie: *mut berval,
        value: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_dirsync_control(
        ld: *mut LDAP,
        flags: ::std::os::raw::c_int,
        maxAttrCount: ::std::os::raw::c_int,
        cookie: *mut berval,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_dirsync_control(
        ld: *mut LDAP,
        ctrl: *mut LDAPControl,
        continueFlag: *mut ::std::os::raw::c_int,
        cookie: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_extended_dn_value(
        ld: *mut LDAP,
        flag: ::std::os::raw::c_int,
        value: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_extended_dn_control(
        ld: *mut LDAP,
        flag: ::std::os::raw::c_int,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_show_deleted_control(
        ld: *mut LDAP,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_server_notification_control(
        ld: *mut LDAP,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_assertion_control_value(
        ld: *mut LDAP,
        assertion: *mut ::std::os::raw::c_char,
        value: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_assertion_control(
        ld: *mut LDAP,
        filter: *mut ::std::os::raw::c_char,
        iscritical: ::std::os::raw::c_int,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LDAPDerefSpec {
    pub derefAttr: *mut ::std::os::raw::c_char,
    pub attributes: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_LDAPDerefSpec() {
    const UNINIT: ::std::mem::MaybeUninit<LDAPDerefSpec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LDAPDerefSpec>(),
        16usize,
        concat!("Size of: ", stringify!(LDAPDerefSpec)),
    );
    assert_eq!(
        ::std::mem::align_of::<LDAPDerefSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(LDAPDerefSpec)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).derefAttr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPDerefSpec),
            "::",
            stringify!(derefAttr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPDerefSpec),
            "::",
            stringify!(attributes),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LDAPDerefVal {
    pub type_: *mut ::std::os::raw::c_char,
    pub vals: BerVarray,
    pub next: *mut LDAPDerefVal,
}
#[test]
fn bindgen_test_layout_LDAPDerefVal() {
    const UNINIT: ::std::mem::MaybeUninit<LDAPDerefVal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LDAPDerefVal>(),
        24usize,
        concat!("Size of: ", stringify!(LDAPDerefVal)),
    );
    assert_eq!(
        ::std::mem::align_of::<LDAPDerefVal>(),
        8usize,
        concat!("Alignment of ", stringify!(LDAPDerefVal)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(LDAPDerefVal), "::", stringify!(type_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vals) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(LDAPDerefVal), "::", stringify!(vals)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(LDAPDerefVal), "::", stringify!(next)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LDAPDerefRes {
    pub derefAttr: *mut ::std::os::raw::c_char,
    pub derefVal: berval,
    pub attrVals: *mut LDAPDerefVal,
    pub next: *mut LDAPDerefRes,
}
#[test]
fn bindgen_test_layout_LDAPDerefRes() {
    const UNINIT: ::std::mem::MaybeUninit<LDAPDerefRes> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LDAPDerefRes>(),
        40usize,
        concat!("Size of: ", stringify!(LDAPDerefRes)),
    );
    assert_eq!(
        ::std::mem::align_of::<LDAPDerefRes>(),
        8usize,
        concat!("Alignment of ", stringify!(LDAPDerefRes)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).derefAttr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPDerefRes),
            "::",
            stringify!(derefAttr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).derefVal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPDerefRes),
            "::",
            stringify!(derefVal),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrVals) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPDerefRes),
            "::",
            stringify!(attrVals),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(LDAPDerefRes), "::", stringify!(next)),
    );
}
extern "C" {
    pub fn ldap_create_deref_control_value(
        ld: *mut LDAP,
        ds: *mut LDAPDerefSpec,
        value: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_deref_control(
        ld: *mut LDAP,
        ds: *mut LDAPDerefSpec,
        iscritical: ::std::os::raw::c_int,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_derefresponse_free(dr: *mut LDAPDerefRes);
}
extern "C" {
    pub fn ldap_parse_derefresponse_control(
        ld: *mut LDAP,
        ctrl: *mut LDAPControl,
        drp: *mut *mut LDAPDerefRes,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_deref_control(
        ld: *mut LDAP,
        ctrls: *mut *mut LDAPControl,
        drp: *mut *mut LDAPDerefRes,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_persistentsearch_control_value(
        ld: *mut LDAP,
        changetypes: ::std::os::raw::c_int,
        changesonly: ::std::os::raw::c_int,
        return_echg_ctls: ::std::os::raw::c_int,
        value: *mut berval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_persistentsearch_control(
        ld: *mut LDAP,
        changetypes: ::std::os::raw::c_int,
        changesonly: ::std::os::raw::c_int,
        return_echg_ctls: ::std::os::raw::c_int,
        isCritical: ::std::os::raw::c_int,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_parse_entrychange_control(
        ld: *mut LDAP,
        ctrl: *mut LDAPControl,
        chgtypep: *mut ::std::os::raw::c_int,
        prevdnp: *mut berval,
        chgnumpresentp: *mut ::std::os::raw::c_int,
        chgnump: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldap_create_accountusability_control(
        ld: *mut LDAP,
        ctrlp: *mut *mut LDAPControl,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LDAPAccountUsabilityMoreInfo {
    pub inactive: ber_int_t,
    pub reset: ber_int_t,
    pub expired: ber_int_t,
    pub remaining_grace: ber_int_t,
    pub seconds_before_unlock: ber_int_t,
}
#[test]
fn bindgen_test_layout_LDAPAccountUsabilityMoreInfo() {
    const UNINIT: ::std::mem::MaybeUninit<LDAPAccountUsabilityMoreInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LDAPAccountUsabilityMoreInfo>(),
        20usize,
        concat!("Size of: ", stringify!(LDAPAccountUsabilityMoreInfo)),
    );
    assert_eq!(
        ::std::mem::align_of::<LDAPAccountUsabilityMoreInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(LDAPAccountUsabilityMoreInfo)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inactive) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPAccountUsabilityMoreInfo),
            "::",
            stringify!(inactive),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPAccountUsabilityMoreInfo),
            "::",
            stringify!(reset),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expired) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPAccountUsabilityMoreInfo),
            "::",
            stringify!(expired),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remaining_grace) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPAccountUsabilityMoreInfo),
            "::",
            stringify!(remaining_grace),
        ),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).seconds_before_unlock) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPAccountUsabilityMoreInfo),
            "::",
            stringify!(seconds_before_unlock),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LDAPAccountUsability {
    pub seconds_remaining: ber_int_t,
    pub more_info: LDAPAccountUsabilityMoreInfo,
}
#[test]
fn bindgen_test_layout_LDAPAccountUsability() {
    const UNINIT: ::std::mem::MaybeUninit<LDAPAccountUsability> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LDAPAccountUsability>(),
        20usize,
        concat!("Size of: ", stringify!(LDAPAccountUsability)),
    );
    assert_eq!(
        ::std::mem::align_of::<LDAPAccountUsability>(),
        4usize,
        concat!("Alignment of ", stringify!(LDAPAccountUsability)),
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).seconds_remaining) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPAccountUsability),
            "::",
            stringify!(seconds_remaining),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).more_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LDAPAccountUsability),
            "::",
            stringify!(more_info),
        ),
    );
}
extern "C" {
    pub fn ldap_parse_accountusability_control(
        ld: *mut LDAP,
        ctrl: *mut LDAPControl,
        availablep: *mut ::std::os::raw::c_int,
        usabilityp: *mut LDAPAccountUsability,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ldifrecord {
    pub lr_op: ber_tag_t,
    pub lr_dn: berval,
    pub lr_ctrls: *mut *mut LDAPControl,
    pub ldif_ops: ldifrecord_ldif_ops_u,
    pub lr_ctx: *mut ::std::os::raw::c_void,
    pub lr_lines: ::std::os::raw::c_int,
    pub lr_lm: *mut LDAPMod,
    pub lr_mops: *mut ::std::os::raw::c_uchar,
    pub lr_freeval: *mut ::std::os::raw::c_char,
    pub lr_vals: *mut berval,
    pub lr_btype: *mut berval,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ldifrecord_ldif_ops_u {
    pub lr_mods: *mut *mut LDAPMod,
    pub ldif_op_rename: ldifrecord_ldif_ops_u_ldif_op_rename_s,
    pub ldif_op_ext: ldifrecord_ldif_ops_u_ldif_op_ext_s,
    pub ldif_op_cmp: ldifrecord_ldif_ops_u_ldif_op_cmp_s,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldifrecord_ldif_ops_u_ldif_op_rename_s {
    pub lr_newrdn: berval,
    pub lr_newsuperior: berval,
    pub lr_deleteoldrdn: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ldifrecord_ldif_ops_u_ldif_op_rename_s() {
    const UNINIT: ::std::mem::MaybeUninit<ldifrecord_ldif_ops_u_ldif_op_rename_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldifrecord_ldif_ops_u_ldif_op_rename_s>(),
        40usize,
        concat!("Size of: ", stringify!(ldifrecord_ldif_ops_u_ldif_op_rename_s)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldifrecord_ldif_ops_u_ldif_op_rename_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ldifrecord_ldif_ops_u_ldif_op_rename_s)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_newrdn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u_ldif_op_rename_s),
            "::",
            stringify!(lr_newrdn),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_newsuperior) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u_ldif_op_rename_s),
            "::",
            stringify!(lr_newsuperior),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_deleteoldrdn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u_ldif_op_rename_s),
            "::",
            stringify!(lr_deleteoldrdn),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldifrecord_ldif_ops_u_ldif_op_ext_s {
    pub lr_extop_oid: berval,
    pub lr_extop_data: berval,
}
#[test]
fn bindgen_test_layout_ldifrecord_ldif_ops_u_ldif_op_ext_s() {
    const UNINIT: ::std::mem::MaybeUninit<ldifrecord_ldif_ops_u_ldif_op_ext_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldifrecord_ldif_ops_u_ldif_op_ext_s>(),
        32usize,
        concat!("Size of: ", stringify!(ldifrecord_ldif_ops_u_ldif_op_ext_s)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldifrecord_ldif_ops_u_ldif_op_ext_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ldifrecord_ldif_ops_u_ldif_op_ext_s)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_extop_oid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u_ldif_op_ext_s),
            "::",
            stringify!(lr_extop_oid),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_extop_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u_ldif_op_ext_s),
            "::",
            stringify!(lr_extop_data),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldifrecord_ldif_ops_u_ldif_op_cmp_s {
    pub lr_cmp_attr: berval,
    pub lr_cmp_bvalue: berval,
}
#[test]
fn bindgen_test_layout_ldifrecord_ldif_ops_u_ldif_op_cmp_s() {
    const UNINIT: ::std::mem::MaybeUninit<ldifrecord_ldif_ops_u_ldif_op_cmp_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldifrecord_ldif_ops_u_ldif_op_cmp_s>(),
        32usize,
        concat!("Size of: ", stringify!(ldifrecord_ldif_ops_u_ldif_op_cmp_s)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldifrecord_ldif_ops_u_ldif_op_cmp_s>(),
        8usize,
        concat!("Alignment of ", stringify!(ldifrecord_ldif_ops_u_ldif_op_cmp_s)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_cmp_attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u_ldif_op_cmp_s),
            "::",
            stringify!(lr_cmp_attr),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_cmp_bvalue) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u_ldif_op_cmp_s),
            "::",
            stringify!(lr_cmp_bvalue),
        ),
    );
}
#[test]
fn bindgen_test_layout_ldifrecord_ldif_ops_u() {
    const UNINIT: ::std::mem::MaybeUninit<ldifrecord_ldif_ops_u> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldifrecord_ldif_ops_u>(),
        40usize,
        concat!("Size of: ", stringify!(ldifrecord_ldif_ops_u)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldifrecord_ldif_ops_u>(),
        8usize,
        concat!("Alignment of ", stringify!(ldifrecord_ldif_ops_u)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_mods) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u),
            "::",
            stringify!(lr_mods),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldif_op_rename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u),
            "::",
            stringify!(ldif_op_rename),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldif_op_ext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u),
            "::",
            stringify!(ldif_op_ext),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldif_op_cmp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord_ldif_ops_u),
            "::",
            stringify!(ldif_op_cmp),
        ),
    );
}
#[test]
fn bindgen_test_layout_ldifrecord() {
    const UNINIT: ::std::mem::MaybeUninit<ldifrecord> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldifrecord>(),
        128usize,
        concat!("Size of: ", stringify!(ldifrecord)),
    );
    assert_eq!(
        ::std::mem::align_of::<ldifrecord>(),
        8usize,
        concat!("Alignment of ", stringify!(ldifrecord)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_op) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ldifrecord), "::", stringify!(lr_op)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_dn) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ldifrecord), "::", stringify!(lr_dn)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_ctrls) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(ldifrecord), "::", stringify!(lr_ctrls)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldif_ops) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ldifrecord), "::", stringify!(ldif_ops)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_ctx) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(ldifrecord), "::", stringify!(lr_ctx)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_lines) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(ldifrecord), "::", stringify!(lr_lines)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_lm) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(ldifrecord), "::", stringify!(lr_lm)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_mops) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(ldifrecord), "::", stringify!(lr_mops)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_freeval) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ldifrecord),
            "::",
            stringify!(lr_freeval),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_vals) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(ldifrecord), "::", stringify!(lr_vals)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lr_btype) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(ldifrecord), "::", stringify!(lr_btype)),
    );
}
pub type LDIFRecord = ldifrecord;
extern "C" {
    pub fn ldap_ldif_record_done(lr: *mut LDIFRecord);
}
extern "C" {
    pub fn ldap_parse_ldif_record(
        rbuf: *mut berval,
        linenum: ::std::os::raw::c_ulong,
        lr: *mut LDIFRecord,
        errstr: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __ll: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __ld: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ll) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(max_align_t), "::", stringify!(__ll)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ld) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(max_align_t), "::", stringify!(__ld)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct propval {
    pub name: *const ::std::os::raw::c_char,
    pub values: *mut *const ::std::os::raw::c_char,
    pub nvalues: ::std::os::raw::c_uint,
    pub valsize: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_propval() {
    const UNINIT: ::std::mem::MaybeUninit<propval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<propval>(),
        24usize,
        concat!("Size of: ", stringify!(propval)),
    );
    assert_eq!(
        ::std::mem::align_of::<propval>(),
        8usize,
        concat!("Alignment of ", stringify!(propval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(propval), "::", stringify!(name)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(propval), "::", stringify!(values)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nvalues) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(propval), "::", stringify!(nvalues)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valsize) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(propval), "::", stringify!(valsize)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct propctx {
    _unused: [u8; 0],
}
extern "C" {
    pub fn prop_new(estimate: ::std::os::raw::c_uint) -> *mut propctx;
}
extern "C" {
    pub fn prop_dup(
        src_ctx: *mut propctx,
        dst_ctx: *mut *mut propctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prop_request(
        ctx: *mut propctx,
        names: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prop_get(ctx: *mut propctx) -> *const propval;
}
extern "C" {
    pub fn prop_getnames(
        ctx: *mut propctx,
        names: *mut *const ::std::os::raw::c_char,
        vals: *mut propval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prop_clear(ctx: *mut propctx, requests: ::std::os::raw::c_int);
}
extern "C" {
    pub fn prop_erase(ctx: *mut propctx, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn prop_dispose(ctx: *mut *mut propctx);
}
extern "C" {
    pub fn prop_format(
        ctx: *mut propctx,
        sep: *const ::std::os::raw::c_char,
        seplen: ::std::os::raw::c_int,
        outbuf: *mut ::std::os::raw::c_char,
        outmax: ::std::os::raw::c_uint,
        outlen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prop_set(
        ctx: *mut propctx,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        vallen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prop_setvals(
        ctx: *mut propctx,
        name: *const ::std::os::raw::c_char,
        values: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sasl_conn {
    _unused: [u8; 0],
}
pub type sasl_conn_t = sasl_conn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sasl_secret {
    pub len: ::std::os::raw::c_ulong,
    pub data: [::std::os::raw::c_uchar; 1usize],
}
#[test]
fn bindgen_test_layout_sasl_secret() {
    const UNINIT: ::std::mem::MaybeUninit<sasl_secret> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sasl_secret>(),
        16usize,
        concat!("Size of: ", stringify!(sasl_secret)),
    );
    assert_eq!(
        ::std::mem::align_of::<sasl_secret>(),
        8usize,
        concat!("Alignment of ", stringify!(sasl_secret)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sasl_secret), "::", stringify!(len)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sasl_secret), "::", stringify!(data)),
    );
}
pub type sasl_secret_t = sasl_secret;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sasl_rand_s {
    _unused: [u8; 0],
}
pub type sasl_rand_t = sasl_rand_s;
pub type register_t = ::std::os::raw::c_long;
pub type time_t = ::std::os::raw::c_long;
pub type suseconds_t = ::std::os::raw::c_long;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type mode_t = ::std::os::raw::c_uint;
pub type nlink_t = ::std::os::raw::c_ulong;
pub type off_t = ::std::os::raw::c_long;
pub type ino_t = ::std::os::raw::c_ulong;
pub type dev_t = ::std::os::raw::c_ulong;
pub type blksize_t = ::std::os::raw::c_long;
pub type blkcnt_t = ::std::os::raw::c_long;
pub type fsblkcnt_t = ::std::os::raw::c_ulong;
pub type fsfilcnt_t = ::std::os::raw::c_ulong;
pub type timer_t = *mut ::std::os::raw::c_void;
pub type clockid_t = ::std::os::raw::c_int;
pub type clock_t = ::std::os::raw::c_long;
pub type pid_t = ::std::os::raw::c_int;
pub type id_t = ::std::os::raw::c_uint;
pub type uid_t = ::std::os::raw::c_uint;
pub type gid_t = ::std::os::raw::c_uint;
pub type key_t = ::std::os::raw::c_int;
pub type useconds_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread {
    _unused: [u8; 0],
}
pub type pthread_t = *mut __pthread;
pub type pthread_once_t = ::std::os::raw::c_int;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutexattr_t {
    pub __attr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__attr),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_condattr_t {
    pub __attr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__attr),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrierattr_t {
    pub __attr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__attr),
        ),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlockattr_t {
    pub __attr: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__attr),
        ),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_attr_t {
    pub __u: pthread_attr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t__bindgen_ty_1 {
    pub __i: [::std::os::raw::c_int; 14usize],
    pub __vi: [::std::os::raw::c_int; 14usize],
    pub __s: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t__bindgen_ty_1),
            "::",
            stringify!(__i),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__vi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t__bindgen_ty_1),
            "::",
            stringify!(__vi),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t__bindgen_ty_1),
            "::",
            stringify!(__s),
        ),
    );
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_attr_t), "::", stringify!(__u)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_mutex_t {
    pub __u: pthread_mutex_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t__bindgen_ty_1 {
    pub __i: [::std::os::raw::c_int; 10usize],
    pub __vi: [::std::os::raw::c_int; 10usize],
    pub __p: [*mut ::std::os::raw::c_void; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t__bindgen_ty_1),
            "::",
            stringify!(__i),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__vi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t__bindgen_ty_1),
            "::",
            stringify!(__vi),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t__bindgen_ty_1),
            "::",
            stringify!(__p),
        ),
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_mutex_t), "::", stringify!(__u)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_cond_t {
    pub __u: pthread_cond_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t__bindgen_ty_1 {
    pub __i: [::std::os::raw::c_int; 12usize],
    pub __vi: [::std::os::raw::c_int; 12usize],
    pub __p: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__i),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__vi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__vi),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__p),
        ),
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_cond_t), "::", stringify!(__u)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_rwlock_t {
    pub __u: pthread_rwlock_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t__bindgen_ty_1 {
    pub __i: [::std::os::raw::c_int; 14usize],
    pub __vi: [::std::os::raw::c_int; 14usize],
    pub __p: [*mut ::std::os::raw::c_void; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__i),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__vi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__vi),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__p),
        ),
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_rwlock_t), "::", stringify!(__u)),
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_barrier_t {
    pub __u: pthread_barrier_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t__bindgen_ty_1 {
    pub __i: [::std::os::raw::c_int; 8usize],
    pub __vi: [::std::os::raw::c_int; 8usize],
    pub __p: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t__bindgen_ty_1)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t__bindgen_ty_1)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t__bindgen_ty_1),
            "::",
            stringify!(__i),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__vi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t__bindgen_ty_1),
            "::",
            stringify!(__vi),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t__bindgen_ty_1),
            "::",
            stringify!(__p),
        ),
    );
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__u),
        ),
    );
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type ushort = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type uint = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type quad_t = ::std::os::raw::c_longlong;
pub type u_quad_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval)),
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timeval), "::", stringify!(tv_sec)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timeval), "::", stringify!(tv_usec)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec)),
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timespec), "::", stringify!(tv_sec)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timespec), "::", stringify!(tv_nsec)),
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t)),
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sigset_t), "::", stringify!(__bits)),
    );
}
pub type sigset_t = __sigset_t;
pub type fd_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set)),
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fd_set), "::", stringify!(fds_bits)),
    );
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type sasl_malloc_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
>;
pub type sasl_calloc_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: usize, arg2: usize) -> *mut ::std::os::raw::c_void,
>;
pub type sasl_realloc_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type sasl_free_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn sasl_set_alloc(
        arg1: sasl_malloc_t,
        arg2: sasl_calloc_t,
        arg3: sasl_realloc_t,
        arg4: sasl_free_t,
    );
}
pub type sasl_mutex_alloc_t = ::std::option::Option<
    unsafe extern "C" fn() -> *mut ::std::os::raw::c_void,
>;
pub type sasl_mutex_lock_t = ::std::option::Option<
    unsafe extern "C" fn(mutex: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type sasl_mutex_unlock_t = ::std::option::Option<
    unsafe extern "C" fn(mutex: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type sasl_mutex_free_t = ::std::option::Option<
    unsafe extern "C" fn(mutex: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn sasl_set_mutex(
        arg1: sasl_mutex_alloc_t,
        arg2: sasl_mutex_lock_t,
        arg3: sasl_mutex_unlock_t,
        arg4: sasl_mutex_free_t,
    );
}
pub type sasl_ssf_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sasl_security_properties {
    pub min_ssf: sasl_ssf_t,
    pub max_ssf: sasl_ssf_t,
    pub maxbufsize: ::std::os::raw::c_uint,
    pub security_flags: ::std::os::raw::c_uint,
    pub property_names: *mut *const ::std::os::raw::c_char,
    pub property_values: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sasl_security_properties() {
    const UNINIT: ::std::mem::MaybeUninit<sasl_security_properties> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sasl_security_properties>(),
        32usize,
        concat!("Size of: ", stringify!(sasl_security_properties)),
    );
    assert_eq!(
        ::std::mem::align_of::<sasl_security_properties>(),
        8usize,
        concat!("Alignment of ", stringify!(sasl_security_properties)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_ssf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_security_properties),
            "::",
            stringify!(min_ssf),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ssf) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_security_properties),
            "::",
            stringify!(max_ssf),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxbufsize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_security_properties),
            "::",
            stringify!(maxbufsize),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_security_properties),
            "::",
            stringify!(security_flags),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_names) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_security_properties),
            "::",
            stringify!(property_names),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).property_values) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_security_properties),
            "::",
            stringify!(property_values),
        ),
    );
}
pub type sasl_security_properties_t = sasl_security_properties;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sasl_callback {
    pub id: ::std::os::raw::c_ulong,
    pub proc_: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sasl_callback() {
    const UNINIT: ::std::mem::MaybeUninit<sasl_callback> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sasl_callback>(),
        24usize,
        concat!("Size of: ", stringify!(sasl_callback)),
    );
    assert_eq!(
        ::std::mem::align_of::<sasl_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(sasl_callback)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sasl_callback), "::", stringify!(id)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proc_) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(sasl_callback), "::", stringify!(proc_)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_callback),
            "::",
            stringify!(context),
        ),
    );
}
pub type sasl_callback_t = sasl_callback;
pub type sasl_getopt_t = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        plugin_name: *const ::std::os::raw::c_char,
        option: *const ::std::os::raw::c_char,
        result: *mut *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_log_t = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_getpath_t = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        path: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub const sasl_verify_type_t_SASL_VRFY_PLUGIN: sasl_verify_type_t = 0;
pub const sasl_verify_type_t_SASL_VRFY_CONF: sasl_verify_type_t = 1;
pub const sasl_verify_type_t_SASL_VRFY_PASSWD: sasl_verify_type_t = 2;
pub const sasl_verify_type_t_SASL_VRFY_OTHER: sasl_verify_type_t = 3;
pub type sasl_verify_type_t = ::std::os::raw::c_uint;
pub type sasl_verifyfile_t = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        type_: sasl_verify_type_t,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_getconfpath_t = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        path: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_getsimple_t = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_int,
        result: *mut *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_getsecret_t = ::std::option::Option<
    unsafe extern "C" fn(
        conn: *mut sasl_conn_t,
        context: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_int,
        psecret: *mut *mut sasl_secret_t,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_chalprompt_t = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_int,
        challenge: *const ::std::os::raw::c_char,
        prompt: *const ::std::os::raw::c_char,
        defresult: *const ::std::os::raw::c_char,
        result: *mut *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_getrealm_t = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_int,
        availrealms: *mut *const ::std::os::raw::c_char,
        result: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_authorize_t = ::std::option::Option<
    unsafe extern "C" fn(
        conn: *mut sasl_conn_t,
        context: *mut ::std::os::raw::c_void,
        requested_user: *const ::std::os::raw::c_char,
        rlen: ::std::os::raw::c_uint,
        auth_identity: *const ::std::os::raw::c_char,
        alen: ::std::os::raw::c_uint,
        def_realm: *const ::std::os::raw::c_char,
        urlen: ::std::os::raw::c_uint,
        propctx: *mut propctx,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_server_userdb_checkpass_t = ::std::option::Option<
    unsafe extern "C" fn(
        conn: *mut sasl_conn_t,
        context: *mut ::std::os::raw::c_void,
        user: *const ::std::os::raw::c_char,
        pass: *const ::std::os::raw::c_char,
        passlen: ::std::os::raw::c_uint,
        propctx: *mut propctx,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_server_userdb_setpass_t = ::std::option::Option<
    unsafe extern "C" fn(
        conn: *mut sasl_conn_t,
        context: *mut ::std::os::raw::c_void,
        user: *const ::std::os::raw::c_char,
        pass: *const ::std::os::raw::c_char,
        passlen: ::std::os::raw::c_uint,
        propctx: *mut propctx,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type sasl_canon_user_t = ::std::option::Option<
    unsafe extern "C" fn(
        conn: *mut sasl_conn_t,
        context: *mut ::std::os::raw::c_void,
        in_: *const ::std::os::raw::c_char,
        inlen: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        user_realm: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_char,
        out_max: ::std::os::raw::c_uint,
        out_len: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn sasl_set_path(
        path_type: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_version(
        implementation: *mut *const ::std::os::raw::c_char,
        version: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sasl_version_info(
        implementation: *mut *const ::std::os::raw::c_char,
        version_string: *mut *const ::std::os::raw::c_char,
        version_major: *mut ::std::os::raw::c_int,
        version_minor: *mut ::std::os::raw::c_int,
        version_step: *mut ::std::os::raw::c_int,
        version_patch: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sasl_done();
}
extern "C" {
    pub fn sasl_server_done() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_client_done() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_dispose(pconn: *mut *mut sasl_conn_t);
}
extern "C" {
    pub fn sasl_errstring(
        saslerr: ::std::os::raw::c_int,
        langlist: *const ::std::os::raw::c_char,
        outlang: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sasl_errdetail(conn: *mut sasl_conn_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sasl_seterror(
        conn: *mut sasl_conn_t,
        flags: ::std::os::raw::c_uint,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn sasl_getprop(
        conn: *mut sasl_conn_t,
        propnum: ::std::os::raw::c_int,
        pvalue: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sasl_channel_binding {
    pub name: *const ::std::os::raw::c_char,
    pub critical: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_ulong,
    pub data: *const ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_sasl_channel_binding() {
    const UNINIT: ::std::mem::MaybeUninit<sasl_channel_binding> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sasl_channel_binding>(),
        32usize,
        concat!("Size of: ", stringify!(sasl_channel_binding)),
    );
    assert_eq!(
        ::std::mem::align_of::<sasl_channel_binding>(),
        8usize,
        concat!("Alignment of ", stringify!(sasl_channel_binding)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_channel_binding),
            "::",
            stringify!(name),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).critical) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_channel_binding),
            "::",
            stringify!(critical),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_channel_binding),
            "::",
            stringify!(len),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_channel_binding),
            "::",
            stringify!(data),
        ),
    );
}
pub type sasl_channel_binding_t = sasl_channel_binding;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sasl_http_request {
    pub method: *const ::std::os::raw::c_char,
    pub uri: *const ::std::os::raw::c_char,
    pub entity: *const ::std::os::raw::c_uchar,
    pub elen: ::std::os::raw::c_ulong,
    pub non_persist: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sasl_http_request() {
    const UNINIT: ::std::mem::MaybeUninit<sasl_http_request> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sasl_http_request>(),
        40usize,
        concat!("Size of: ", stringify!(sasl_http_request)),
    );
    assert_eq!(
        ::std::mem::align_of::<sasl_http_request>(),
        8usize,
        concat!("Alignment of ", stringify!(sasl_http_request)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_http_request),
            "::",
            stringify!(method),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_http_request),
            "::",
            stringify!(uri),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_http_request),
            "::",
            stringify!(entity),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_http_request),
            "::",
            stringify!(elen),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).non_persist) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_http_request),
            "::",
            stringify!(non_persist),
        ),
    );
}
pub type sasl_http_request_t = sasl_http_request;
extern "C" {
    pub fn sasl_setprop(
        conn: *mut sasl_conn_t,
        propnum: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_idle(conn: *mut sasl_conn_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sasl_interact {
    pub id: ::std::os::raw::c_ulong,
    pub challenge: *const ::std::os::raw::c_char,
    pub prompt: *const ::std::os::raw::c_char,
    pub defresult: *const ::std::os::raw::c_char,
    pub result: *const ::std::os::raw::c_void,
    pub len: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sasl_interact() {
    const UNINIT: ::std::mem::MaybeUninit<sasl_interact> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sasl_interact>(),
        48usize,
        concat!("Size of: ", stringify!(sasl_interact)),
    );
    assert_eq!(
        ::std::mem::align_of::<sasl_interact>(),
        8usize,
        concat!("Alignment of ", stringify!(sasl_interact)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(sasl_interact), "::", stringify!(id)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).challenge) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_interact),
            "::",
            stringify!(challenge),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prompt) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(sasl_interact), "::", stringify!(prompt)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defresult) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sasl_interact),
            "::",
            stringify!(defresult),
        ),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(sasl_interact), "::", stringify!(result)),
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(sasl_interact), "::", stringify!(len)),
    );
}
pub type sasl_interact_t = sasl_interact;
extern "C" {
    pub fn sasl_client_init(callbacks: *const sasl_callback_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_client_new(
        service: *const ::std::os::raw::c_char,
        serverFQDN: *const ::std::os::raw::c_char,
        iplocalport: *const ::std::os::raw::c_char,
        ipremoteport: *const ::std::os::raw::c_char,
        prompt_supp: *const sasl_callback_t,
        flags: ::std::os::raw::c_uint,
        pconn: *mut *mut sasl_conn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_client_start(
        conn: *mut sasl_conn_t,
        mechlist: *const ::std::os::raw::c_char,
        prompt_need: *mut *mut sasl_interact_t,
        clientout: *mut *const ::std::os::raw::c_char,
        clientoutlen: *mut ::std::os::raw::c_uint,
        mech: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_client_step(
        conn: *mut sasl_conn_t,
        serverin: *const ::std::os::raw::c_char,
        serverinlen: ::std::os::raw::c_uint,
        prompt_need: *mut *mut sasl_interact_t,
        clientout: *mut *const ::std::os::raw::c_char,
        clientoutlen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_server_init(
        callbacks: *const sasl_callback_t,
        appname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_server_new(
        service: *const ::std::os::raw::c_char,
        serverFQDN: *const ::std::os::raw::c_char,
        user_realm: *const ::std::os::raw::c_char,
        iplocalport: *const ::std::os::raw::c_char,
        ipremoteport: *const ::std::os::raw::c_char,
        callbacks: *const sasl_callback_t,
        flags: ::std::os::raw::c_uint,
        pconn: *mut *mut sasl_conn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_global_listmech() -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sasl_listmech(
        conn: *mut sasl_conn_t,
        user: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        sep: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
        result: *mut *const ::std::os::raw::c_char,
        plen: *mut ::std::os::raw::c_uint,
        pcount: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_server_start(
        conn: *mut sasl_conn_t,
        mech: *const ::std::os::raw::c_char,
        clientin: *const ::std::os::raw::c_char,
        clientinlen: ::std::os::raw::c_uint,
        serverout: *mut *const ::std::os::raw::c_char,
        serveroutlen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_server_step(
        conn: *mut sasl_conn_t,
        clientin: *const ::std::os::raw::c_char,
        clientinlen: ::std::os::raw::c_uint,
        serverout: *mut *const ::std::os::raw::c_char,
        serveroutlen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_checkapop(
        conn: *mut sasl_conn_t,
        challenge: *const ::std::os::raw::c_char,
        challen: ::std::os::raw::c_uint,
        response: *const ::std::os::raw::c_char,
        resplen: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_checkpass(
        conn: *mut sasl_conn_t,
        user: *const ::std::os::raw::c_char,
        userlen: ::std::os::raw::c_uint,
        pass: *const ::std::os::raw::c_char,
        passlen: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_user_exists(
        conn: *mut sasl_conn_t,
        service: *const ::std::os::raw::c_char,
        user_realm: *const ::std::os::raw::c_char,
        user: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_setpass(
        conn: *mut sasl_conn_t,
        user: *const ::std::os::raw::c_char,
        pass: *const ::std::os::raw::c_char,
        passlen: ::std::os::raw::c_uint,
        oldpass: *const ::std::os::raw::c_char,
        oldpasslen: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_auxprop_request(
        conn: *mut sasl_conn_t,
        propnames: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_auxprop_getctx(conn: *mut sasl_conn_t) -> *mut propctx;
}
extern "C" {
    pub fn sasl_auxprop_store(
        conn: *mut sasl_conn_t,
        ctx: *mut propctx,
        user: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_encode(
        conn: *mut sasl_conn_t,
        input: *const ::std::os::raw::c_char,
        inputlen: ::std::os::raw::c_uint,
        output: *mut *const ::std::os::raw::c_char,
        outputlen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_encodev(
        conn: *mut sasl_conn_t,
        invec: *const iovec,
        numiov: ::std::os::raw::c_uint,
        output: *mut *const ::std::os::raw::c_char,
        outputlen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sasl_decode(
        conn: *mut sasl_conn_t,
        input: *const ::std::os::raw::c_char,
        inputlen: ::std::os::raw::c_uint,
        output: *mut *const ::std::os::raw::c_char,
        outputlen: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
